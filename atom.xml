<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Fakes's Blog</title>
        <link>https://bill5522.github.io/%3CBlog%3E</link>
        <description>undefined</description>
        <lastBuildDate>Fri, 28 Aug 2020 17:09:39 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Gridsome Feed Plugin</generator>
        <atom:link href="https://bill5522.github.io/%3CBlog%3E/atom.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[招商银行宝可梦联名卡开箱]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/cmb-pokemon-card/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/cmb-pokemon-card/</guid>
            <pubDate>Thu, 27 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>在好多个月前就申请了招商银行的海贼王联名卡，真的超好看。前几天突然发现招商银行又出了宝可梦联名卡（皮卡丘），还是透明的！超级心动，在酷安看到说可以申请平级换卡，就去试了试。从申请换卡到领卡大概一周时间，到手发现真的比图片好看！</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/cmb-pokemon-card/2.png?fmt=webp&w=1280" alt="皮卡丘联名卡">
<img src="https://rmt.dogedoge.com/fetch/royce/storage/cmb-pokemon-card/1.png?fmt=webp" alt="皮卡丘联名卡">
<img src="https://rmt.dogedoge.com/fetch/royce/storage/cmb-pokemon-card/card-f.jpg?w=1280" alt="正面">
<img src="https://rmt.dogedoge.com/fetch/royce/storage/cmb-pokemon-card/card-b.jpg?w=1280" alt="反面"></p>
<h2 id="为什么选择招商银行">为什么选择招商银行</h2>
<p>最早是在微信朋友圈里看到了招行联名卡的广告，不过那时候还没 16，只能酸着。后面又在酷安看到招行各种福利，超级心动。而且招行有非常多联名卡：宝可梦、Hello Kitty、航海王、海绵宝宝、哔哩哔哩、王者荣耀……</p>
<p>那当然最重要的还是<strong>卡面太好看了</strong>，还<strong>免年费、工本费</strong>！</p>
<p>最开始是选择了海贼王的联名卡，但后面出的宝可梦真的太好看了，「独特透明卡基，可视化电圈，炫彩浮雕工艺」，忍不住去换卡。</p>
<h2 id="办卡流程">办卡流程</h2>
<p>下载招商银行 App，首页下方有个储蓄卡申请，进入即可办卡，需要满足年龄 16+ 和非虚拟手机号。也可以直接在微信公众号里办卡。办理航海王联名卡在领卡是需要注意招行对人名的翻译，比如索隆在它那的翻译就不是这个，害我找了半天。申请一般都是会通过的，但也有极少情况会不通过。</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/cmb-pokemon-card/get.png?fmt=webp" alt="申请"></p>
<p>办卡是不收取任何费用的，而且第一张卡免年费，千万不要被员工骗了（有看到过这种事情，被骗说要开通 xxx 服务才能免年费）。大概一星期就会收到招行的短信，去时需要身份证和手机短信，不过一些卡可能比较紧缺，一个月才收到通知也是有可能的。有些卡貌似收到通知一周内领卡还有福利啥的。就算放在网点很久不去领卡也没关系，我就放了两个月才领的卡。</p>
<h2 id="后记">后记</h2>
<p>招行的服务我觉得是大部分银行中最好的，App 也算是做的最好的一个，各种活动都是直接送钱，开卡就送 30rmb，之后还有很多其他的，不像某某宝就只给优惠劵。</p>
<p>不过招行貌似网点很少，我们这小城市就一个网点，有些县城甚至没有，而且我从来没见到过单独的招行 ATM，每次存钱都得跑网点边上的 ATM，真的很麻烦。</p>
<p>前几天还发现招行 App 里居然给卡片做了动画！真的爱了！</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/cmb-pokemon-card/animation.gif" alt="展示动画"></p>
<p>第一次办卡就喜欢上了招行，估计以后是招行的忠实用户😍</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Artalk 自托管评论系统的后端部署]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/artalk-api-php/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/artalk-api-php/</guid>
            <pubDate>Sun, 23 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>首先，恭喜自己，成功部署了 Artalk 的后端，这或许是件很简单的事，但对于我这种对后端（利用云服务器）一窍不通的白痴来说，这还真是件值得庆祝的事，从「白痴」进阶到了「小白」。考虑到可能也有像我这样的小白，所以这篇文章就出现了。</p>
<p>从最开始的 Valine 到 utterances 再到 Disqus。<br>Valine 基于 LeanCloud，但是第三方的服务总归不是特别安全，LeanCloud 的政策也一直在边，完全切断免费版应该是不可能的，但限制只会越来越多。还有人发了刷 Valine 评论的教程，邮箱随时可能爆炸，本就不安全的 Valine 变得更不可靠。垃圾评论也越来越多，没有后端的 Valine 几乎没办法避免，Valine-Admin（Valine 评论系统的扩展和增强） 引入了垃圾评论过滤，但实际效果不佳，垃圾评论没过滤掉，反而正常评论被误杀了；<br>utterances 基于 GitHub 的 Issue，虽然官方并没有禁止使用 Issue 进行评论搭建，但是我总感觉怪怪的，而且众所周知，GitHub 的 API 在国内也非常不稳定。使用体验上，我个人觉得并不是非常好，不能进行回复，还不如直接在 Issue 界面评论；<br>Disqus 应该算是世界上比较有名的评论系统了，但是因为一些原因被国内墙了，国内只能依靠 DisqusJS 进行评论浏览，而如果想要评论就必须进行代理，要是没有这个问题，Disqus 或许是个很好的选择（除了那庞大的体积）。害，「向来冷清的本站雪上加霜 —— Monstx」真是麻烦啊。</p>
<p><a href="https://github.com/qwqcode/Artalk">@qwqcode/Artalk</a> 🌌 一款简洁有趣的自托管评论系统，应该算是一个比较小众的评论系统了，光是要自己部署后端就劝退一大批人了。不过这都是<del>小</del>大问题，现在用的 Gridsome 框架在国内应该也算是非常小众的一款博客框架了，<del>但咱就喜欢与众不同（求异心理，不可取😜）</del>，毕竟小而美嘛，正好有台服务器，就本着试一试的心态开始了折腾。</p>
<p>*教程采用阿里云学生机 + 宝塔面板进行演示</p>
<p>:::warning 警告
<strong>鉴于最近宝塔出现的 0day 漏洞，请自行判断宝塔的安全问题！</strong>
:::</p>
<h2 id="安装宝塔面板">安装宝塔面板</h2>
<p>新人建站，肯定首选宝塔。</p>
<p>如果之前服务器有整过一些自己也不知道的东西，可以先重装一次系统（宝塔推荐使用 centos 8.X 的系统），记住重装时的用户名和密码。</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/artalk-api-php/re-install.png?fmt=webp" alt="重装"></p>
<p>进入实列进行远程连接，选择 「终端连接」 进行 「密码认证」</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/artalk-api-php/remote.png?fmt=webp" alt="远程连接"></p>
<p>输入以下命令安装宝塔</p>
<pre><code class="language-bash">yum install -y wget
wget -O install.sh http://download.bt.cn/install/install_6.0.sh
sh install.sh</code></pre>
<p>安装完成后会显示登录网址（外网）和用户名密码，需要保存。同时可能会提示进行端口放行，此时前往安全组页面查看</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/artalk-api-php/safe.png?fmt=webp" alt="安全组"></p>
<p>若没有相关端口的放行则需要手动添加</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/artalk-api-php/port.png?fmt=webp" alt="放行端口"></p>
<h2 id="安装相关内容">安装相关内容</h2>
<p>安装 Git，在远程连接中输入：</p>
<pre><code class="language-bash">yum –y install git</code></pre>
<p>登录宝塔界面，在软件商店页面搜索安装 <code>PHP-7.4</code> 和 <code>Nginx 1.18.0</code>，注意选择<strong>快速安装</strong></p>
<p>进入 PHP 管理页面，在禁用函数中将 <code>putenv</code> 删除</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/artalk-api-php/putenv.png?fmt=webp" alt="删除函数禁用"></p>
<p>在远程连接中输入</p>
<pre><code class="language-bash">git clone https://github.com/qwqcode/ArtalkServerPhp.git
cd ArtalkServerPhp
composer install
php -r &quot;copy(&#39;Config.example.php&#39;, &#39;Config.php&#39;);&quot;</code></pre>
<p>若在出现报错 <code>Warning: putenv() has been disabled</code>，检查禁用函数中是否还存在 <code>putenv</code>。</p>
<h2 id="修改配置">修改配置</h2>
<p>在宝塔面板的文件页面中找到 <code>Config.php</code> 参照注释进行修改，如果你是按之前的步骤来的，没有进入其他目录，那 <code>ArtalkServerPhp</code> 文件夹应该是在根目录的 <code>root</code> 文件夹中。</p>
<h2 id="添加站点">添加站点</h2>
<p>更改 <code>ArtalkServePhp</code> 文件夹的权限为 755，并应用到子目录</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/artalk-api-php/authority.png?fmt=webp" alt="更改权限"></p>
<p>在宝塔面板的站点页面添加站点，根目录选择 <code>ArtalkServePhp/public</code> 文件夹</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/artalk-api-php/site.png?fmt=webp" alt="添加站点"></p>
<p>将域名用 A 记录解析到服务器的<strong>公网 IP</strong></p>
<p>至此，大功告成！</p>
<h2 id="后">后</h2>
<p>现在发现这个过程是真的蛮简单的，不过对于当时的我来说可绝对不是这样的。这是 Artalk 后端部署的部分，前端部分如有问题可以看看「<a href="https://blog.monsterx.cn/code/use-self-hosted-comment-system-in-gridsome/">为 Gridsome 添加 Artalk 自托管评论系统 - Monstx</a>」，适配了暗黑模式，那有轮子咱肯定要直接用呀！</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[利用 GitHub 从 sitemap 中提取链接并推送至百度]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/baidu-submit-using-sitemap/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/baidu-submit-using-sitemap/</guid>
            <pubDate>Tue, 11 Aug 2020 09:05:19 GMT</pubDate>
            <content:encoded><![CDATA[<p>之前在 「利用 GitHub Action 实现自动化」一文中介绍了如何利用 GitHub Action 实现自动提交百度收录。当时使用的博客框架是 Hexo，配套了自动生成文章链接的插件。而目前本站已经从 Hexo 换成了 Gridsome，经过一番折腾，终于成功迁移了，不过以前的一些过水的文章已经删掉了<del>实际上是懒得给文章做题图</del>。中途还有用 Forestry（博客 CMS 系统） 管理文章的想法，但是转念一想，管理系统是在浏览器上的，写文章体验本不怎么样，而且我都已经把源代码上传到 GitHub 了，本地在 Markdown 编辑器中写完再上传到 GitHub 中，体验反而更好。</p>
<h2 id="前言">前言</h2>
<p>扯远了，回归正题。前面提到，在 Hexo 中是依靠一个 <a href="https://github.com/huiwang/hexo-baidu-url-submit">hexo-baidu-url-submit</a> 插件就能完成文章链接生成、链接推送，不得不佩服 Hexo 这超赞的生态，不光是插件，主题也是如此，这应该也是 Hexo 最大的优势了吧。相比之下， Gridsome 这里主题少的可怜，插件虽然有 172 个，大概是 Hexo 的一般，但大部分插件的本地化较差，毕竟是外国用户更多。</p>
<p>Gridsome 官网上看到官方称其 <em>SEO-friendly</em></p>
<blockquote>
<p>Gridsome sites load as static HTML before they hydrate into fully Vue.js-powered SPAs. This makes it possible for search engines to be able to crawl content and give better SEO ranking, and still have all the power of Vue.js.</p>
</blockquote>
<p>于是乎，就想到了 sitemap，Google 不用说了，交了站点地图基本都会收录，百度那虽然不一定但总比没有好。当然还想到的就是百度提供的 API。翻了一圈，就找到了 <a href="https://gridsome.org/plugins/@gridsome/plugin-sitemap">@gridsome/plugin-sitemap</a>。百度的 API 推送只好暂时放下。今天正好无聊又想到了这件事，现在已经有了 sitemap，或许我们可以直接从其中提取链接进行推送。一搜，果然有提取 sitemap 中链接的网站，但这样手动提取，然后写脚本用 API 岂不是很麻烦，不如直接把提取也集成进来。</p>
<h2 id="提取链接">提取链接</h2>
<p>稍微看看 sitemap.xml 就能发现链接的格式是固定的</p>
<pre><code class="language-xml">&lt;url&gt;
  &lt;loc&gt;https://blog.jalenchuh.cn/&lt;/loc&gt;
&lt;/url&gt;</code></pre>
<p>那么我们只需要用正则去获取 <code>&lt;loc&gt;</code> 和 <code>&lt;/loc&gt;</code> 之间的内容就好了</p>
<pre><code class="language-js">(?&lt;=&lt;loc&gt;).*?(?=&lt;/loc&gt;)</code></pre>
<h2 id="推送">推送</h2>
<p>比较方便的有 <code>curl</code> 和 <code>post</code> ，然而利用 <code>post</code> 需要差不多 30s，而 <code>curl</code> 只要 2s 左右。</p>
<p>官方也给了 <code>curl</code> 的方法</p>
<pre><code class="language-bash">curl -H &#39;Content-Type:text/plain&#39; --data-binary @urls.txt &quot;http://data.zz.baidu.com/urls?site=xxx&amp;token=xxx</code></pre>
<h2 id="编写链接生成脚步">编写链接生成脚步</h2>
<p>通过 <code>urllib.request.urlopen</code> 进行文件打开，然后用 utf-8 解码 <code>.decode(&#39;utf-8&#39;)</code>，本地测试的时候没有用 utf-8 就会莫名出错。</p>
<p>用 <code>re.compile</code> 进行正则匹配，并用 <code>re.findall</code> 直接获取匹配后的字串，之后来个 <code>for</code> 就完美解决。</p>
<pre><code class="language-py">import re
import urllib
import requests

sitemap = &#39;https://blog.jalenchuh.cn/sitemap.xml&#39;

html = urllib.request.urlopen(sitemap).read().decode(&#39;utf-8&#39;)
result = re.findall(re.compile(r&#39;(?&lt;=&lt;loc&gt;).*?(?=&lt;/loc&gt;)&#39;), html)

with open(&#39;urls.txt&#39;, &#39;w&#39;) as file:
  for data in result:
    print(data, file=file)
file.close()</code></pre>
<p>以上是利用 py 生成 txt 文件，等会再用 <code>curl</code> 推送。当然还可以利用 <code>post</code> 进行推送，不过慢很多。</p>
<p>首先安装百度要求定义 <code>header</code></p>
<pre><code class="language-py">headers = {
  &#39;User-Agent&#39;: &#39;curl/7.12.1&#39;,
  &#39;Host&#39;: &#39;data.zz.baidu.com&#39;,
  &#39;Content-Type&#39;: &#39;text/plain&#39;,
  &#39;Content-Length&#39;: &#39;83&#39;
}</code></pre>
<p>利用 <code>requests.post</code> 推送</p>
<pre><code class="language-py">for data in result:
  print(data + &#39;\n&#39; +
    requests.post(
      url = url,
      data = data,
      headers = headers
    ).text + &#39;\n&#39;
  )</code></pre>
<p>:::warning 此处 url 涉及 token
我们应该先用 <code>BAIDU_TOKEN</code> 替换原来的 token 值，之后在 Action 中利用 <code>sed -i</code> 替换。
:::</p>
<h2 id="编写-action-文件">编写 Action 文件</h2>
<pre><code class="language-yaml">name: push


on:
  schedule:
    - cron: &#39;0 16 * * *&#39;
  watch:
    types: [started]


jobs:
  build:
    runs-on: ubuntu-latest


    steps:
    - name: Checkout
      uses: actions/checkout@master


    - name: Set up python
      uses: actions/setup-python@v1
      with:
        python-version: 3.8


    - name: Install requests
      run: pip install requests


    - name: generate
      run: python generate.py


    - name: Push
      env:
        BAIDU_TOKEN: ${{ secrets.BAIDUTOKEN }}
        SITE: ${{ secrets.SITE }}
      run: curl -H &#39;Content-Type:text/plain&#39; --data-binary @urls.txt &quot;http://data.zz.baidu.com/urls?site=${SITE}&amp;token=${BAIDU_TOKEN}&quot;</code></pre>
<p>如果是利用 <code>post</code> 进行推送，直接运行 py 文件就好了，不过在此之前需要替换刚刚文件中的 <code>BAIDU_TOKEN</code></p>
<pre><code class="language-yaml">    - name: BAIDU env
      env:
        BAIDU_TOKEN: ${{ secrets.BAIDUTOKEN }}
      run: sed -i &quot;s/BAIDU_TOKEN/${BAIDU_TOKEN}/&quot; xxx.py</code></pre>
<h2 id="配置">配置</h2>
<p>具体配置见 <a href="https://github.com/JalenChuh/baidu-url-submit-by-using-sitemap#readme">README</a></p>
<h2 id="结束">结束</h2>
<p>到这里，这篇文章就水完了。终究还是<em>需求推动生成啊</em>。</p>
<p>前几天从 Hexo 换到了 Gridsome，把一些非常水的文章删了，现在只剩下十几篇了，不过也好，提升博客质量嘛，宁愿文章少也不要一堆水文。每个人对水文的定义不同，在我看来文章很短但不一定是水文，而以前的几篇 OI 题解就很水，题目一放，随便说几句就直接上代码。不过适当的水文还是可以接受的<del>比如这篇</del>。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[我是如何加速博客的]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/how-i-make-blog-faster/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/how-i-make-blog-faster/</guid>
            <pubDate>Thu, 30 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>:::note 🍉 同步发布</p>
<ul>
<li><strong>在少数派上阅读本文</strong> — <a href="https://sspai.com/post/61820">我是如何加速博客的</a></li>
</ul>
<p>:::</p>
<p>谁不想拥有一个超快的博客？<del>我</del>
这篇文章鸽了好多天了，本来打算 28 号写完的，正好那天下午开始暑假，结果晚上去聚餐了，聚餐结束又大晚上的去爬山了 <del>（真爬山，还有机会）</del>。然后到了 29 号，又花了一个下午和晚上重装系统:confounded:，咕咕咕就到了 30 号。</p>
<p>不多说了，先来看看我的成果：</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/how-i-make-blog-faster/speed_desktop.png?fmt=webp&w=1280" alt="speed desktop"></p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/how-i-make-blog-faster/speed_mobile.png?fmt=webp&w=1280" alt="speed mobile"></p>
<p>如果你和我一样，时不时用 PageSpeed Insights 跑跑博客、F12 看看网页加载速度，那么接下来的内容可能会对你有点帮助。</p>
<p>虽然我这冷淡的博客<strong>什么都不优化就能有九十多分</strong>，但是优化完能明显感觉浏览体验更好了。</p>
<h2 id="服务器--cdn">服务器 &amp; CDN</h2>
<p>如果你是静态博客，你可以使用自己的服务器或者其他平台提供的静态网站托管，而当你没有备案时，没办法用国内的服务器或者 CDN 服务，速度基本上不来。
动态博客使用服务器一个道理。</p>
<p>而备案就见仁见智了，但是必须承认，加速博客的最简单最有效的方法就是备案，然后接入国内 CDN。</p>
<p>我目前使用的是腾讯云开发中的静态网站托管，之前尝试过 <code>COS + CDN</code> 和 <code>OSS + CDN</code>，但是使用 <code>云储存 + CDN</code> 种方法需要担心的就是流量问题，万一被恶意刷流量，会产生巨额费用，所以防护措施一定要做好。</p>
<p>现在域名还基本都会配个小绿🔒，但是个别免费 SSL 提供商所提供的服务是真滴慢阿，光 SSL
连接就去了好几秒，所以选择一个不错的提供商是非常重要的。泛域名证书推荐 Let&#39;s Encrypt Authority X3，双域名证书推荐 TrustAsia TLS RSA CA。</p>
<h2 id="访问统计">访问统计</h2>
<p>访问统计分为两种，一种是单纯的 PV UV 统计，比如常见的不蒜子。但是<del>众所周知</del>，不蒜子日常抽风，加载时间动不动就超过 1s，但是我们想要一个超快的博客啊，整个博客的加载时间最好在 2s 以内，被你一个不蒜子占了一半怎么行呢。</p>
<p>还有一种就是稍微专业一点的，会统计更多的内容，就比如大部分博客使用的百度或 Google 提供的统计，而引入统计的同时会带来一个 js 和一张 gif，还有几个乱七八糟的东西。百度虽然是国内的但百度统计加载还是很慢，基本半秒以内，有时候甚至一秒。而 Google 的在国内有节点，速度其实和百度差不了多少。</p>
<h3 id="leancloud-统计代替不蒜子">LeanCloud 统计代替不蒜子</h3>
<p>对于日常抽风的不蒜子，你完全可以使用 LeanCloud 代替它，原理很简单，就是通过网页加载一段 js，向 LeanCloud 中储存的数据进行修改。但是请注意，该方法速度也不是特别快，但至少比不蒜子的 1s 要强一点，基本能在 0.5s 内完成加载。</p>
<p>直接在网页中加入以下 js[^1] 即可。并在 LeanCloud 中新建一个应用，获取 <code>app_id</code> <code>app_key</code> <code>server_url</code>，并修改 js 中三者的值。</p>
<p>:::tip
server_url 为该应用绑定的 API 域名</p>
<p>国内版用户必填，国际版用户可不填
:::</p>
<pre><code class="language-js">(function () {
  // 查询存储的记录
  function getRecord(Counter, target) {
    return new Promise(function (resolve, reject) {
      Counter(&#39;get&#39;, &#39;/classes/Counter?where=&#39; + encodeURIComponent(JSON.stringify({target})))
        .then(resp =&gt; resp.json())
        .then(({results, code, error}) =&gt; {
          if (code === 401) {
            throw error;
          }
          if (results &amp;&amp; results.length &gt; 0) {
            var record = results[0];
            resolve(record);
          } else {
            Counter(&#39;post&#39;, &#39;/classes/Counter&#39;, {target, time: 0})
              .then(resp =&gt; resp.json())
              .then((record, error) =&gt; {
                if (error) {
                  throw error;
                }
                resolve(record);
              }).catch(error =&gt; {
              console.error(&#39;Failed to create&#39;, error);
              reject(error);
            });
          }
        }).catch((error) =&gt; {
        console.error(&#39;LeanCloud Counter Error:&#39;, error);
        reject(error);
      });
    })
  }
  // 发起自增请求
  function increment(Counter, incrArr) {
    return new Promise(function (resolve, reject) {
      Counter(&#39;post&#39;, &#39;/batch&#39;, {
        &quot;requests&quot;: incrArr
      }).then((res) =&gt; {
        res = res.json();
        if (res.error) {
          throw res.error;
        }
        resolve(res);
      }).catch((error) =&gt; {
        console.error(&#39;Failed to save visitor count&#39;, error);
        reject(error);
      });
    });
  }
  // 构建自增请求体
  function buildIncrement(objectId) {
    return {
      &quot;method&quot;: &quot;PUT&quot;,
      &quot;path&quot;: `/1.1/classes/Counter/${ objectId }`,
      &quot;body&quot;: {
        &quot;time&quot;: {
          &#39;__op&#39;: &#39;Increment&#39;,
          &#39;amount&#39;: 1
        }
      }
    }
  }
  // 校验是否为有效的 UV
  function validUV() {
    var key = &#39;LeanCloud_UV_Flag&#39;;
    var flag = localStorage.getItem(key);
    if (flag) {
      // 距离标记小于 24 小时则不计为 UV
      if (new Date().getTime() - parseInt(flag) &lt;= 86400000) {
        return false;
      }
    }
    localStorage.setItem(key, new Date().getTime().toString());
    return true;
  }
  function addCount(Counter) {
    var enableIncr = &#39;&lt;%= theme.web_analytics.enable %&gt;&#39; === &#39;true&#39; &amp;&amp; window.location.hostname !== &#39;localhost&#39;;
    var getterArr = [];
    var incrArr = [];
    // 请求 PV 并自增
    var pvCtn = document.querySelector(&#39;#leancloud-site-pv-container&#39;);
    if (pvCtn || enableIncr) {
      var pvGetter = getRecord(Counter, &#39;site-pv&#39;).then((record) =&gt; {
        incrArr.push(buildIncrement(record.objectId))
        var ele = document.querySelector(&#39;#leancloud-site-pv&#39;);
        if (ele) {
          ele.innerText = record.time + 1;
          if (pvCtn) {
            pvCtn.style.display = &#39;inline&#39;;
          }
        }
      });
      getterArr.push(pvGetter);
    }
    // 请求 UV 并自增
    var uvCtn = document.querySelector(&#39;#leancloud-site-uv-container&#39;);
    if (uvCtn || enableIncr) {
      var uvGetter = getRecord(Counter, &#39;site-uv&#39;).then((record) =&gt; {
        var vuv = validUV();
        vuv &amp;&amp; incrArr.push(buildIncrement(record.objectId))
        var ele = document.querySelector(&#39;#leancloud-site-uv&#39;);
        if (ele) {
          ele.innerText = record.time + (vuv ? 1 : 0);
          if (uvCtn) {
            uvCtn.style.display = &#39;inline&#39;;
          }
        }
      });
      getterArr.push(uvGetter);
    }
    // 如果是文章，请求文章的浏览数，并自增
    if (&#39;&lt;%= is_post() %&gt;&#39; === &#39;true&#39;) {
      var viewCtn = document.querySelector(&#39;#leancloud-post-views-container&#39;);
      if (viewCtn || enableIncr) {
        var target = decodeURI(&#39;&lt;%= url_for(page.path) %&gt;&#39;);
        var viewGetter = getRecord(Counter, target).then((record) =&gt; {
          incrArr.push(buildIncrement(record.objectId))
          if (viewCtn) {
            var ele = document.querySelector(&#39;#leancloud-post-views&#39;);
            if (ele) {
              ele.innerText = (record.time || 0) + 1;
              viewCtn.style.display = &#39;inline&#39;;
            }
          }
        });
        getterArr.push(viewGetter);
      }
    }
    // 如果启动计数自增，批量发起自增请求
    if (enableIncr) {
      Promise.all(getterArr).then(() =&gt; {
        incrArr.length &gt; 0 &amp;&amp; increment(Counter, incrArr);
      })
    }
  }

  var app_id = &#39;xxx&#39;
  var app_key = &#39;xxx&#39;
  var server_url = &#39;xxx&#39;

  function fetchData(api_server) {
    var Counter = (method, url, data) =&gt; {
      return fetch(`${ api_server }/1.1${ url }`, {
        method,
        headers: {
          &#39;X-LC-Id&#39;: app_id,
          &#39;X-LC-Key&#39;: app_key,
          &#39;Content-Type&#39;: &#39;application/json&#39;,
        },
        body: JSON.stringify(data)
      });
    };
    addCount(Counter);
  }
  var api_server = app_id.slice(-9) !== &#39;-MdYXbMMI&#39; ? server_url : `https://${ app_id.slice(0, 8).toLowerCase() }.api.lncldglobal.com`;
  if (api_server) {
    fetchData(api_server);
  } else {
    fetch(&#39;https://app-router.leancloud.cn/2/route?appId=&#39; + app_id)
      .then(resp =&gt; resp.json())
      .then(({api_server}) =&gt; {
        fetchData(&#39;https://&#39; + api_server);
      });
  }
})();</code></pre>
<h3 id="加速-google-analytics">加速 Google Analytics</h3>
<p>百度统计没看到过有人弄加速，Google Analytics 的话我目前尝试了两种方法</p>
<h4 id="利用-cloudflare-workers">利用 Cloudflare Workers</h4>
<p>原理是将一段 js 部署在 Cloudflare Workers，网页向它传输数据，它再异步发给 Google Analytics。详见 <a href="https://github.com/SukkaW/cloudflare-workers-async-google-analytics">@SukkaW/cloudflare-workers-async-google-analytics</a></p>
<p>但是该方法还是存在一定问题的，Cloudflare 自身的速度 emmm，反向加速的称号可不是吹的，某些地区确实速度非常慢，和原来的 Google Analytics 相比或许会快那么一点点（至少我当时测试的是这样的）</p>
<h4 id="采用-dogedoge-提供的加速">采用 DogeDoge 提供的加速</h4>
<p>这个是我目前使用的方法，非常简单，直接使用以下代码来引入 ga。</p>
<pre><code class="language-html">&lt;script&gt;
  window.ga_tid = &#39;Your google_site_id&#39;;
  (function() {
    var dga = document.createElement(&quot;script&quot;);
    dga.src = &quot;https://rmt.dogedoge.com/fetch/public/ga.js&quot;;
    var s = document.getElementsByTagName(&quot;script&quot;)[0];
    s.parentNode.insertBefore(dga, s);
  })();
&lt;/script&gt;</code></pre>
<p>引入的文件总共就 1 kb 多一点点，速度也是杠杠的，基本两个文件各自都能在 100ms 内加载完成，总共也就 200ms，而我测试后发现，大部分时间两个文件总共加载时间都在 100ms 内。</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/how-i-make-blog-faster/ga.png?fmt=webp" alt="ga"></p>
<p>强烈推荐使用这种方法，速度贼快，还省事。</p>
<h2 id="预加载">预加载</h2>
<p>网站第一次加载的等待时间非常重要，但浏览过程中的链接跳转的加载速度同样重要。</p>
<p>提前加载网页，即通过 js 对当前页面中的本站链接进行预先加载，或是在鼠标悬浮在链接上时，对该链接进行预先加载。</p>
<p>这里吐槽下，看到过有些博客使用了 pjax 局部刷新，但是博客本身的速度还是非常慢，导致体验极差，所以如果博客本身速度就非常非常慢，使用 pjax 并不会有什么效果。</p>
<p>目前我尝试过的共有 4 种方案</p>
<ul>
<li>instantclick</li>
<li><a href="https://github.com/GoogleChromeLabs/quicklink">quicklink</a></li>
<li><a href="https://github.com/instantpage/instant.page">instant.page</a></li>
<li><a href="https://github.com/gijo-varghese/flying-pages">flying-pages</a></li>
</ul>
<p>首先建议排除 instantclick，配置非常麻烦，需要考虑很多 js 问题，而且项目本身已经没有人维护了（应该是的，上一次更新是几年前的事了）</p>
<h3 id="quicklink">quicklink</h3>
<p>由 Google 的团队开发，通过脚本检测当前可视区域内的链接，进行预加载。
比如下方图片中共包含 6 个本站链接，本页面所有内容加载完成后，就会对这 6 个链接预先加载，在本地留下缓存，使得点击跳转的后的加载速度变快。因为它会加载当前可视区的所有链接，所以对服务器的负担会比较重。</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/how-i-make-blog-faster/quicklink.png?fmt=webp&w=1280" alt="quicklink"></p>
<p>他采用的预加载是在 <code>&lt;head&gt;</code> 中引入 <code>&lt;link&gt;</code></p>
<pre><code class="language-html">&lt;link rel=&quot;prefetch&quot; href=&quot;xxx&quot;&gt;</code></pre>
<p>使用方法很简单</p>
<pre><code class="language-html">&lt;script src=&quot;https://unpkg.com/quicklink@2.0.0/dist/quicklink.umd.js&quot;&gt;&lt;/script&gt;

......

&lt;script&gt;quicklink.listen();&lt;/script&gt;</code></pre>
<p>更多的用法请查看该项目的 <a href="https://github.com/GoogleChromeLabs/quicklink">GitHub 仓库</a></p>
<h3 id="instantpage">instant.page</h3>
<p>刚刚的 quicklink 是直接预加载，而这个则是鼠标悬浮在链接上时才对该链接预加载，这无疑极大的减轻了服务器的负担，是个非常好的选择。</p>
<p>只需要加入以下代码就可以使用了</p>
<pre><code class="language-html">&lt;script src=&quot;//instant.page/5.1.0&quot; type=&quot;module&quot; integrity=&quot;sha384-by67kQnR+pyfy8yWP4kPO12fHKRLHZPfEsiSXR8u2IKcTdxD805MGUXBzVPnkLHw&quot;&gt;&lt;/script&gt;</code></pre>
<p>预加载的方式和 quicklink 一样，也是引入 <code>&lt;link&gt;</code>。</p>
<p>貌似它没有更多用法了。</p>
<h3 id="flying-pages">Flying Pages</h3>
<p>这个也就是我目前在使用的了。同时具有 quicklink 和 instant.page 的功能，能直接预加载可视区域内的链接，还能预加载鼠标悬浮的链接（前一个未生效的情况下），并且能自动检测服务器状态，如果服务器繁忙则不进行预加载。同时还能修改 4 个参数的值。</p>
<pre><code class="language-html">&lt;script&gt;
  window.FPConfig = {
    delay: 0,    // 浏览器空闲多少秒后开始预加载
    ignoreKeywords: [],    // 不进行预加载的链接，例 [&quot;#&quot;, &quot;/about&quot;]
    maxRPS: 3,    // 每秒最大加载数
    hoverDelay: 50    // 鼠标悬浮后预加的延迟，毫秒单位
    // 上方数值未默认值
  };
&lt;/script&gt;
&lt;script defer src=&quot;https://cdn.jsdelivr.net/gh/gijo-varghese/flying-pages@2.1.2/flying-pages.min.js&quot;&gt;&lt;/script&gt;</code></pre>
<h3 id="总结">总结</h3>
<table>
<thead>
<tr>
<th align="center">插件</th>
<th align="center">Quicklink</th>
<th align="center">Instant.page</th>
<th align="center">Flying Pages</th>
</tr>
</thead>
<tbody><tr>
<td align="center">预加载的内容</td>
<td align="center">当前可视区域内的链接</td>
<td align="center">鼠标悬浮的链接</td>
<td align="center">可视区域 + 鼠标悬浮</td>
</tr>
<tr>
<td align="center">大小</td>
<td align="center">1.5 KB</td>
<td align="center">1.3 KB</td>
<td align="center">1.5 KB</td>
</tr>
<tr>
<td align="center">支持 Safari</td>
<td align="center">✅</td>
<td align="center">❌</td>
<td align="center">✅</td>
</tr>
<tr>
<td align="center">判断服务器状态</td>
<td align="center">❌</td>
<td align="center">❌</td>
<td align="center">✅</td>
</tr>
</tbody></table>
<p>大致的一些差异就在这里，怎么选择看你自己需求。</p>
<h2 id="静态文件">静态文件</h2>
<h3 id="图片">图片</h3>
<p>图片是一个网站浏览的大头，之前也有写过一篇文章『<a href="https://bill5522.github.io/posts/12013.html">加速网页加载？我选择对图片下手</a>』，通过使用 WebP 来减少网站加载流量，提供网站速度。</p>
<p>今年 WWDC 上 Safari 的更新也支持了 WebP，终于，我们不再需要为 Safair 不支持 WebP 而对它特殊照顾了。但是我个人还是习惯保留 PNG or JPG 原图，所以我选择了 <a href="https://v2ex.com/t/659652#reply43">DogeDoge 提供的图床服务</a>，支持智能 WebP（浏览器支持 WebP 则返回 WebP 格式，不知此则返回原图）。还有件值得提的事情，不单单又拍云，最近腾讯数据万象也支持了智能 WebP。</p>
<p>当然，如果你这在使用的图床服务并不支持该功能，或者并没有使用图床，但仍然想得当相同的体验，『<a href="https://blog.ichr.me/post/webp-on-hexo">WebP 图片优化在 Hexo 上的最佳尝试</a>』 这篇文章中的方法或许是目前最佳的方式。</p>
<p>此外，图片懒加载是个非常有效的方式，用几 kb 的 js 延迟图片加载，博客的首次加载速度能得到非常大的提升。</p>
<h3 id="减少文件">减少文件</h3>
<p>这是博客，初衷是写文章，输出内容。当然，美化博客是件很重要的事情，但过度的美化会适得其反，真正重要的是内容，只有内容好了，看的人才会多。不过话说回来，每个 Blogger 应该都有一个折腾的过程：<code>简单 -&gt; 花里胡哨 -&gt; 简单</code>，<del>起点就是终点</del>。现在我的博客能有 99 分，最大的原因就是这个主题，简约而不简陋，除去字体文件，首页加载的文件不超过 10 个。</p>
<p>既让讲到了字体就谈谈吧，这个算是见仁见智了，有的人认为字体非常重要，直接决定了博客的观感，而有的人觉得无关紧要。我属于前者，所以字体文件在我的博客中算是流量大户了，毕竟我引入了整整三个字体，其中还包括一个中文字体，中文字体的体积可想而知。英文字体：Roboto Slab，中文：思源宋体，代码：Fira Code。两个英文字体的体积还算可以，但中文的体积真的有点大，如果你爱折腾可以试试<a href="https://www.font-spider.org/">字蛛</a>。</p>
<h3 id="文件压缩">文件压缩</h3>
<p>目前我是用的文件压缩插件是 <a href="https://github.com/chenzhutian/hexo-all-minifier">hexo-all-minifier</a>，但是并没有开启 <code>image_minifier</code>，图片压缩速度慢而且我没有把图片和博文放在一起的习惯。总体效果不错，体积能减少 20% 左右。</p>
<p>而对于图片，我使用的是<a href="https://zhitu.isux.us/">智图</a>进行压缩，虽然这个软件已经很久没更新了，但是完全够用</p>
<h3 id="尽量统一外链">尽量统一外链</h3>
<p>这里指的外链是文件外链，加载不同域的文件需要不同的 SSL 连接时间。比如你的一个 js 来自 <code>jsdelivr.net</code>，另一个来自 <code>staticfile.org</code>，那么你就需要两次 SSL 连接，而如果你的两个文件全部来自 <code>jsdelivr.net</code> 那你将只需要一次 SSL 连接。</p>
<h2 id="后">后</h2>
<p>以上就是我的一点小优化，其实也没什么东西，还说不定有什么错的地方，不过对于不怎么会代码的人或许还有点用，毕竟这些基本不涉及什么非常复杂深奥的东西。</p>
<p>V2EX 上曾有一句话 『像你这样不分享教程的人有什么资格看不起我们这些小白？』，所以，希望大佬们在做一些事情之后能分享下相关教程，当然啦，全凭意愿 :blossom:</p>
<p>[^1]: 来自 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/layout/_partial/plugins/leancloud.ejs">Fluid</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[19-20 学年总结]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/freshman-high-school/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/freshman-high-school/</guid>
            <pubDate>Sun, 26 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>高一已经结束了，高中的三分之一也过去了，距离高考也只有六百多天了，但仿佛中考就在昨天。</p>
<h2 id="选科">选科</h2>
<p>其中，对我今后影响比较大的应该就是高考选科了，<strong>物生地</strong>是我的选择。</p>
<p>首先，物理是我毫不犹豫的，历史我基本没兴趣，而且了解了一些比较喜欢的大学专业，都要求物理，整好符合我的选择。</p>
<p>庆幸的是，我喜欢的专业都只对物理有要求，其他随意。</p>
<p>至于地理，更多的是基于个人喜好，感觉对地理这科比较感兴趣，文科中偏理的，虽然说选择题极其玄学，<del>考完都觉得选择全对，甚至能 100</del>，对完答案选择估计<del>也就</del>错个 7 8 题，但兴趣所在，考的不好还是喜欢。</p>
<p>高一下才有生物课，而且是网课之后的，每周课时也很少。一开始选生物是因为对其他的都不怎么感兴趣或者不太喜欢，而生物对我来，不能说不喜欢，也不能说很喜欢，所以最后就决定是它了。现在，学的内容稍微多一点了，感觉还是挺有趣的，理解的东西多了。前端时间还突然想到一点，我们学校因为高一基本没有生物课，到了高二即使没选生物，为了补高一的内容，生物课应该也挺多的，那这样选了生物的和没选生物的课时差别就不大了，那选了生物的不久相对轻松一点了吗？</p>
<p>选完科也要分班了，班里玩的比较好的几个，有一个和我的选择一样，希望能分到一个班吧。</p>
<p>之前聊天时，同学说的一句话</p>
<blockquote>
<p>胡子还没长齐就要我们想破脑袋去决定后半生人生🙏</p>
</blockquote>
<p>确实，感觉也挺残忍的，虽说之后可以改，但非常非常麻烦，而且你学了那么久了，再换到其他选择，或多或少会有些跟不上，毕竟选了和没选，上课的内容进度肯定是不一样的。</p>
<p>但是这或许也不算残忍？之前我一直认为，大家到了高中，或多或少会对之后想读的专业甚至今后的人生有些规划。不可否认，确实有这样的人，但这只是极少数人，基本上的都只是对自己读文还是读理有了规划，甚至还有人完全不知道该怎么选择。</p>
<p>选科的弊端也还是有的，虽说有 12 种选择，但肯定有的学校没有能力开出这 12 种选科的班级，毕竟不是个个学校都有那么多的教师资源。而选课意味着走班，但现在真正实施走班上课的学校少之又少，福建到现在也就 3 所学校做到了。这带来的问题就是：一些同学的选课因为人少无法开班，被迫改选。这也挺残忍的。</p>
<p>当然了，新高考改革才刚刚开始，福建省我们这届也才第二年，今年我们学校开始了少部分走班，不再砍掉那些人太少而无法开班的选择，对他们实行走班。怎么说呢，改革初期，问题肯定很多，只有不断的尝试，才能解决问题。祝好。</p>
<h2 id="oi">OI</h2>
<p>害，是个伤心的话题。</p>
<p>强基计划开始实施了，自主招生啥的也比较困难，虽然说我本身就没有为了这个而学算法，更多的是兴趣，兴趣永远是最好的老师吧。</p>
<p>也非常有幸参加了唯一一次的（可能是吧，反正今年是改回 NOIP 了，但谁知道 €€£ 今后还会不会和 jyb 闹翻，又改回 CSP） CCF CSP-S/J 能力认证，但是就比较菜，第一轮靠运气拿了个奖，第二轮啥也没有，去就是被虐。不过二轮的 3 天非常难忘，一堆人的 801、熬夜到三四点的少年……比赛可以努力，但大家一起的回忆只有经历了才能得到，不管比赛如何，这些回忆我觉得就已经值得了。</p>
<p>那么之后的话，还是会继续学，毕竟还是有那么一点点有趣的 <del>（一个月才 AC 的线段:evergreen_tree:乘法，有趣个 p）</del>。</p>
<h2 id="乒乓球">乒乓球</h2>
<p>下学期最快乐的事应该就是🏓了</p>
<p>记得第一次接触乒乓球是在小学，具体几年级忘了，当时有乒乓球课，接触后就喜欢上了。（有校友吗，古北路小学的，说不定能碰到:sunglasses:）</p>
<p>而之后转回了老家，便没打了。不过到了初中又再一次开打，可是打的时间也并不多，貌似初二开始就没怎么碰了。</p>
<p>当时刚进二中就纳闷，别的学校再破，好歹会有几张乒乓球桌啊，你这一张都没。
不过据说以前有的，后面坏掉了。</p>
<p>疫情回来之后发现在新教学楼下多了一排乒乓球桌（开心😁</p>
<p>第一节体育课老师就先说了乒乓球班的事情，我自然毫不犹豫的跳槽了
（我们这体育课是选科的，羽毛球 篮球 足球 三选一，几个班选同一种的合在一起上）</p>
<p>打球也认识了一些人吧，有的人还不错而有的简直就是**。</p>
<h2 id="母校">母校</h2>
<p>或许是我们学校的特殊缘故，我们回去看老师的次数特比多。</p>
<p>才离开 1 年，就回去了三四次。每次回去都感叹原来学校多么的好，和现在的完全不能比。</p>
<p>当时来这学校其实还是意料之外的事，本来为了去全市<del>最</del>好的高中，暂住证已经是在它的招生片区了，谁知道后面说买了房就得按房子所在的片区来划分，而那边划分的一所学校是刚刚建校 1 年的九年制学校。不过也挺多人说新学校也很好，毕竟刚建，老师也都是个个地方抽调来的优秀教师。后面就按规定去了新学校，记得第一天进去，贼脏，已经建校 1 年了，但还都是装修的痕迹，很多地方也都还没修好，后面也慢慢的看着学校越来越好，越来越完善。新的教师、新的桌椅、新的老师、新的操场，初中部的一切都是全新的（我们上一届因为初中部还没弄好，在小学部度过了一年）</p>
<p>非常幸运能在这样一所学校读完初中:bowing_man:</p>
<h2 id="社交">社交</h2>
<p>之前看到 ChrAlpha 发的一篇 <a href="https://blog.ichr.me/post/expressing-costs/">「发言成本」与为什么我（个人博主）不想建立交流社群</a>，确实在现在这个时代，不少人现实里唯唯诺诺，网络上重拳出击。</p>
<blockquote>
<p>在互联网浪潮中，能离开 App 好好聊天的朋友更要倍加珍惜</p>
</blockquote>
<p>算是幸运的，认识了一个还不错的同性朋友，考试那几天甚至每天 3 4 个电话，现在貌似也每天最少一个电话，<del>喂喂喂，这不是谈恋爱吗。</del></p>
<p>或许和他平常没有手机有关，我们的交流基本都是面对面，而不是在社交 App 上。面对面交流的感受是 App 上无法感受到的，而这或许也是促进两人关系最有效的。</p>
<blockquote>
<p>信息已经成为一种垃圾，它不能回答人类面对的大多数根本问题；对平常的问题，信息也只能勉强提供解答的方向。再换一种方式说，在技术垄断盛行的环境里，信息和人的意旨之间的纽带已经被切断了；也就是说，信息杂乱无章地出现，并不指向具体的人，数量难测，速度惊人，但从理论、意义或宗旨上看却是断裂分割的。
—— 《技术垄断》尼尔·波兹曼</p>
</blockquote>
<p>为了减少自己接受无用信息，开始使用的 RSS，或许有人觉得这是个落后于时代的产物，但它在如今确确实实能够帮助我们。</p>
<p>我比较讨厌的就是抖音、快手等，虽然现在短视频飞速发展，但在这些 App 上所获取的都是毫无价值的”垃圾“。当然了，每个人的看法不同，任何事物都有双面性，我也只是说说我的看法罢了。</p>
<h2 id="others">Others</h2>
<p>还有一些小事，或多或少都是有点意义的。</p>
<p>因为写游记，接触了博客，折腾了很久。</p>
<p>认识了 <a href="https://www.dogedoge.com">dogedoge</a>（一个非常赞的搜索引擎） 的开发者（或许是这样叫），当时因为被误封了 IP，通过邮件联系上了 dogedoge 的人，然后因为博客的事情就认识了。现在博客用的图床就是 dogedoge 提供的，有兴趣可以看看 <a href="https://v2ex.com/t/659652#reply43">dogedoge 图床</a><del>（快给广告费）</del></p>
<p>和一个憨憨玩的挺好的</p>
<p>开始学习 Git 并在 GitHub 中尝试参与项目</p>
<p>也认识了一些有趣的人</p>
<p>开始尝试使用 RSS ……</p>
<hr>
<p>嗯，随便写的，凑合看。</p>
<p>这篇文章写完的时候，期末考成绩正好出来了，总体不怎么样，但是对比之前的考试应该还是有点进步，每次进步一点点，慢慢来吧。</p>
<p>接下来的一个学年，好好学习，好好更新博客，早日背完英语 3500……</p>
<p><strong>任重而道远</strong>，加油吧少年:man_astronaut:</p>
<p>[^1]: banner from <a href="https://icons8.com/">icons8</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[P3372 【模板】线段树 2]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/segment-tree-2/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/segment-tree-2/</guid>
            <pubDate>Sat, 11 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>[^1]</p>
<h2 id="题目描述">题目描述</h2>
<p>如题，已知一个数列，你需要进行下面三种操作：</p>
<ul>
<li>将某区间每一个数乘上 $x$</li>
<li>将某区间每一个数加上 $x$</li>
<li>求出某区间每一个数的和</li>
</ul>
<h2 id="输入格式">输入格式</h2>
<p>第一行包含三个整数 n,m,p，分别表示该数列数字的个数、操作的总个数和模数。</p>
<p>第二行包含 n 个用空格分隔的整数，其中第 i 个数字表示数列第 i 项的初始值。</p>
<p>接下来 m 行每行包含若干个整数，表示一个操作，具体如下：</p>
<p>操作 $1$： 格式：<code>1 x y k</code> 含义：将区间 $[x,y]$ 内每个数乘上 $k$</p>
<p>操作 $2$： 格式：<code>2 x y k</code> 含义：将区间 $[x,y]$ 内每个数加上 $k$</p>
<p>操作 $3$： 格式：<code>3 x y</code> 含义：输出区间 $[x,y]$ 内每个数的和对 $p$ 取模所得的结果</p>
<h2 id="输出格式">输出格式</h2>
<p>输出包含若干行整数，即为所有操作 $3$ 的结果。</p>
<h2 id="输入输出样例">输入输出样例</h2>
<p><strong>输入 #1</strong></p>
<pre><code class="language-text">5 5 38
1 5 4 2 3
2 1 4 1
3 2 5
1 2 4 2
2 3 5 5
3 1 4</code></pre>
<p><strong>输出 #1</strong></p>
<pre><code class="language-text">17
2</code></pre>
<h2 id="说明提示">说明/提示</h2>
<p>【数据范围】</p>
<p>对于 $30%$ 的数据：$n \le 8$，$m \le 10$
对于 $70%$ 的数据：$n \le 10^3$，$m \le 10^4$
对于 $100%$ 的数据：$n \le 10^5$，$m \le 10^5$</p>
<p>除样例外，$p = 571373$</p>
<p>（数据已经过加强^_^）</p>
<p>样例说明：</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/SegmentTree2/01.jpg?fmt=webp" alt="img"></p>
<p>故输出应为 $17$、$22（ 40 \bmod 38 = 2 ）$</p>
<h2 id="所以">所以</h2>
<p>真的有那么亿点点难理解，也还不怎么会，学的时候主要是看 <a href="https://oi-wiki.org/ds/seg/#luogu-p3373-2">线段树 - OI Wiki</a> 的代码 和 <a href="https://www.luogu.com.cn/blog/lhr/solution-p3373">题解 P3373 【【模板】线段树 2】 - lqhsr 的博客</a> 的思路</p>
<p>一个讲的挺明白的，一个代码看着挺明白的 :trophy:</p>
<h3 id="结构体函数">结构体函数</h3>
<p>之前学结构体的时候知道里面可以定义函数，也只是知道，从来没用过。
这题因为经常要 <code>mod</code>，配合结构体函数还是挺方便的。</p>
<pre><code class="language-cpp">struct Test {
    int test1, test2, test3;
    void mod() {
        test1 %= p;
        test2 %= p;
        test3 %= p;
    }
}test[100];

test[k].mod();</code></pre>
<h3 id="懒标记下传">懒标记下传</h3>
<p>和线段树 1 比，多了一个乘法，所以多了乘法懒标记，<strong>初值为 1</strong>。
乘法懒标记下传时需要对 <code>加法懒标记</code>、<code>乘法懒标记</code>和<code>值</code> 进行乘法。
区间乘法也同样的需要对这三个值进行乘法。
其他的基本和线段树 1 一样。</p>
<p>懒标记下传的代码确实挺长的，但理清思路发现还是比较好理解的。</p>
<ol>
<li>乘法懒标记不为 1，则需要下传。
分左右儿子，每边先把所有的乘法做好，再 <code>.mod()</code></li>
</ol>
<p><strong>最后父亲乘法懒标记赋值为 1</strong></p>
<ol start="2">
<li>加法懒标记不为 0，则需要下传。也分左右儿子
儿子懒标记加上父亲懒标记
儿子值加上 （父亲懒标记 * 儿子所办含的节点数）
再 <code>.mod()</code></li>
</ol>
<p><strong>最后父亲懒标记归零</strong></p>
<h3 id="区间修改">区间修改</h3>
<p>整体思路和线段树 1 的一样，乘法的区间修改唯一的区别就在最后一步</p>
<pre><code class="language-cpp">if (l&lt;=s &amp;&amp; t&lt;=r) {
    tree[k].m *= c;
    tree[k].f *= c;
    tree[k].w *= c;
    tree[k].mod();
    return;
}</code></pre>
<h3 id="完整代码">完整代码</h3>
<pre><code class="language-cpp">#include &lt;cstdio&gt;

long long n, m, d, x, y, at, c, p;
struct node {
    long long l, r, w, f, m;
    void mod() {
        w %= p;
        f %= p;
        m %= p;
    }
}tree[400010];

long long read() {
    bool flag = false; long long x = 0; char ch = getchar();
    while(ch&lt;&#39;0&#39; || ch&gt;&#39;9&#39;) {if(ch == &#39;-&#39;) flag = 1; ch = getchar();}
    while(ch&gt;=&#39;0&#39; &amp;&amp; ch &lt;= &#39;9&#39;) {x *= 10; x += ch - &#39;0&#39;; ch = getchar();}
    return flag ? - x : x;
}

void build(long long l, long long r, long long k) {
    long long mid = (l + r) / 2;
    tree[k].l = l, tree[k].r = r, tree[k].m = 1;
    if (l == r) {
        tree[k].w = read();
        return;
    }
    build(l, mid, 2*k);
    build(mid+1, r, 2*k+1);
    tree[k].w = tree[2*k].w + tree[2*k+1].w;
    tree[k].mod();
}

void down(long long k) {
    long long lson = 2 * k, rson = 2 * k + 1;
    int m = tree[k].m, f = tree[k].f;
    if (tree[k].m != 1) {
        tree[lson].w *= m;
        tree[lson].f *= m;
        tree[lson].m *= m;
        tree[lson].mod();

        tree[rson].w *= m;
        tree[rson].f *= m;
        tree[rson].m *= m;
        tree[rson].mod();

        tree[k].m = 1;
    }
    if (f) {
        tree[lson].f += f;
        tree[lson].w += f * (tree[lson].r - tree[lson].l + 1);
        tree[lson].mod();

        tree[rson].f += f;
        tree[rson].w += f * (tree[rson].r - tree[rson].l + 1);
        tree[rson].mod();

        tree[k].f = 0;
    }
}

void cheng(long long l, long long r, long long k, long long c) {
    long long s = tree[k].l, t = tree[k].r;
    long long mid = (s + t) / 2;

    if (l&lt;=s &amp;&amp; t&lt;=r) {
        tree[k].m *= c;
        tree[k].f *= c;
        tree[k].w *= c;
        tree[k].mod();
        return;
    }

    down(k);
    if (l &lt;= mid) cheng(l, r, 2*k, c);
    if (r &gt;= mid + 1) cheng(l, r, 2*k+1, c);

    tree[k].w = tree[2*k].w + tree[2*k+1].w;
    tree[k].w %= p;
}

void add(long long l, long long r, long long k, long long at) {
    long long s = tree[k].l, t = tree[k].r;
    long long mid = (s + t) / 2;

    if (l&lt;=s &amp;&amp; t&lt;=r) {
        tree[k].f += at;
        tree[k].w += at * (t - s + 1);
        tree[k].mod();
        return;
    }

    down(k);
    if (l &lt;= mid) add(l, r, 2*k, at);
    if (r &gt;= mid + 1) add(l, r, 2*k+1, at);

    tree[k].w = tree[2*k].w + tree[2*k+1].w;
    tree[k].mod();
}

long long get(long long l, long long r, long long k) {
    long long s = tree[k].l, t = tree[k].r, sum = 0;
    long long mid = (s + t) / 2;

    if (l&lt;=s &amp;&amp; t&lt;=r) {
        return tree[k].w;
    }

    down(k);
    if (l &lt;= mid) sum += get(l, r, 2*k);
    sum %= p;
    if (r &gt;= mid + 1) sum += get(l, r, 2*k+1);
    return sum % p;
}

int main() {
    n = read(), m = read(), p = read();
    build(1, n, 1);

    while (m--) {
        d = read(), x = read(), y = read();
        if (d == 1) {
            c = read();
            cheng(x, y, 1, c);
        }
        else if (d == 2) {
            at = read();
            add(x, y, 1, at);
        }
        else printf(&quot;%lld\n&quot;, get(x, y, 1));
    }
    return 0;
}</code></pre>
<p>:::warning 🚨 注意 %}</p>
<p>mod 别忘了</p>
<p>add 要 return
cheng 要 return
build 要 return</p>
<p>get 要 down(k)
add 要 down(k)
cheng 要 down(k)</p>
<p>要不然就会这样，一个月了才过（虽然前面有 AC 一次）</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/SegmentTree2/02.png?fmt=webp" alt="warnning"></p>
<p>:::</p>
<p>[^0]: Banner from <a href="https://icons8.com/">Icons8</a>
[^1]: 题目来源 <a href="https://www.luogu.com.cn/problem/P3373">【模板】线段树 2 - 洛谷</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[爱折腾的少年｜新人报道]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/newcomer-to-sspai/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/newcomer-to-sspai/</guid>
            <pubDate>Tue, 07 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>:::note 🍮 同步发布</p>
<ul>
<li><strong>在少数派上阅读本文</strong> — <a href="https://sspai.com/post/61278">爱折腾的少年｜新人报道</a></li>
</ul>
<p>:::</p>
<h3 id="q1：介绍你自己">Q1：介绍你自己</h3>
<p>大家好，我是 JalenChuh，00 后。名字来源于我的中文名，名算是完全按照拼音翻译过来的，姓是对应的英文翻译。</p>
<p>从初中开始就对科技类感兴趣，现在也是。平常除了学习，喜欢折腾自己的<a href="https://blog.jalenchuh.cn">博客</a>。</p>
<p>不算是某一个品牌的粉丝，因产品而定。想体验苹果生态，但是买不起，希望大学之后能靠自己的努力实现。</p>
<p>碰巧，最新的一篇新人报道来自一个 A-Level 体系下的高中生，而我则是国内的一名普通高中生。不过，非常幸运的是，我们学校的整体教学方法不错，每天 7 节课 + 2节自习，大部分走读，走读没有晚自习（有趣的是，在走读生及家长的强烈要求下，学校最近终于给高三的走读生开了晚自习，也是随便你参不参加的那种）。提倡自主学习，2 节实打实的自习课，基本能在学校结束大部分作业，也因此，我回家才有空折腾一些其他东西🤣。</p>
<h3 id="q2：你目前正在主力使用的设备有哪些">Q2：你目前正在主力使用的设备有哪些</h3>
<ul>
<li><p>手机：MEIZU 16th</p>
</li>
<li><p>笔记本：荣耀 MagicBook Pro</p>
</li>
<li><p>平板：iPad Air 2</p>
</li>
</ul>
<p>手机电脑都是上了高中才买的，平板则是用了有些年了。</p>
<p>MEIZU 16th，用着基于 Android 8.1 的 Flyme 8，好消息是，过几天就能升 Android 10 了。</p>
<p>荣耀的魔法书，目前用着都还不错，不打游戏，所以完全够用。偶尔玩玩 GTA 5 也挺流畅的。唯一需要吐槽的就是 AMD 的网卡，太难用了，时不时断网。过段时间打算换掉。</p>
<h3 id="q3：哪些-app-对你的工作--学习--生活最重要">Q3：哪些 App 对你的工作 / 学习 / 生活最重要</h3>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/newcomer-to-sspai/01.png?fmt=webp" alt="APP"></p>
<ul>
<li><p>To Do：我的学习利器，每天早晨或提前一天制订好计划。强迫症的原因，看到未完成的就很不舒服，于是乎，只好抓紧完成任务。考前复习和长假必备。</p>
</li>
<li><p>厚墨：我的 RSS 订阅器和阅读器。UI 非常赞，使用体验极棒。</p>
</li>
<li><p>HandShaker：手机电脑之前传文件用。</p>
</li>
<li><p>百词斩：用来背三千五词、英语阅读和听力。但感觉 APP 本身的背单词方法并不适合我，所以是按照自己的方式来背的。后续考虑买书来背。</p>
</li>
</ul>
<h3 id="q4：能否具体谈谈你是如何使用你的设备和-app-的呢">Q4：能否具体谈谈你是如何使用你的设备和 App 的呢</h3>
<p>iPad 完全用来学习，装的软件不多。</p>
<p>手机靠系统的数字健康限制个个 APP 的使用时间，保证自己不会花过多的时间做无意义的事，从来不刷抖音快手，太浪费时间了，内容还不怎么好。</p>
<p>电脑则是我的主要工具，写代码、写文章全靠它。也用来学习，PDF 和 PPT 基本在电脑上看。</p>
<h3 id="q5：说一个你很喜欢、但还少有人知道的-app">Q5：说一个你很喜欢、但还少有人知道的 App</h3>
<p>Mark Text，一款开源的 MarkDown 编辑器，个人感觉和 Typora 体验差不多。我认为体验最佳的功能是能够直接插入 Unsplash 的图片。</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/newcomer-to-sspai/02.png?fmt=webp" alt="Mark Text"></p>
<h3 id="q6：在你订阅的付费服务当中哪一些是不可或缺的">Q6：在你订阅的付费服务当中哪一些是不可或缺的</h3>
<p>代理算吗🤣，除了这个，我目前没有每月不可或缺的订阅服务。其实主要还是经济原因啦，看到喜欢，要么买断，要么不用付费功能，要么不用。</p>
<blockquote>
<p>遇到喜欢的东西就把它买下来，钱并不是真的花掉了，只是换一种方式，陪伴在你身边。</p>
</blockquote>
<h3 id="q7：接下来有什么打算">Q7：接下来有什么打算</h3>
<p>我的高中生活马上就结束三分之一了，想来也真快，即将面临的是新高考的选科，虽说心中有着未来喜欢的专业和当下选科的目标（物生地），但或多多少还是有点迷茫。</p>
<p>接下来会把大部分精力放在学习上，当然了，文章肯定还是会写的，折腾也肯定还是少不了的。🙇‍♂️</p>
<p>[^0]: Banner from <a href="https://icons8.com/">Icons8</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[利用 GitHub Action 实现自动化]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/use-github-action/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/use-github-action/</guid>
            <pubDate>Sun, 05 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="前言">前言</h2>
<p>首先，为什么选择静态网站？没后台，没数据库，但是方便折腾，可以完全自定义，这是我选择静态博客最大的原因之一。 <del>（其实没钱买服务器才是最大原因）</del></p>
<p>部署静态网站的方法很多，GitHub Page, Coding Page, Gitee Page, Vercel 都是免费的，各有各的优势，先说说这几个免费的。</p>
<h3 id="github-page">GitHub Page</h3>
<p>Github Page 巨硬家的东西，除非不可抗力，要不然出问题的概率很小。但国内部分地区无法访问，部分地区访问速度慢。能利用 Github Action 实现自动化部署。速度问题或许可以通过 CloudFlare 的 CDN 来解决，但速度还是不怎么样。当然，如果你域名备案了，用国内的 CDN 也是没问题的。</p>
<h3 id="coding-page">Coding Page</h3>
<p>Coding Page 表明是 Coding 的，但 Coding 现在算是腾讯的了，出问题的概率也很小。但用的节点全是境外的，一般是香港和新加坡.....，而且日常宕机，动不动就崩了。同样能利用 集成CI 进行自动部署。</p>
<h3 id="gitee-page">Gitee Page</h3>
<p>Gitee Page 码云家的，国内节点，速度没得说，快就完事了。自定义域名和自动更新（也就是说每次更新博客，推送到码云之后还要手动点击部署）需要购买 Pro 版，99 元/年。但因为是国内节点的原因，绑定的域名需要备案。码云还有个比较好的功能，能自动判断博客类型，支持 Jekyll、Hugo、Hexo，能自动进行编译，并部署生成的文件，也就是说你可以直接将整个博客文件夹推上去，每次更新只需要使用 git 推送下就行了，它会帮你生成。</p>
<h3 id="vercel">Vercel</h3>
<p>Vercel 可以直接从 GitHub 导入博客仓库，且能识别静态博客类型，和码云一样自动生成。顺便看了下 Vercel 分配的节点，美国的，但是国内访问速度还是不错的，Ping 了一下，平均 62.0ms，速度也还不错（至少我这是这样）。</p>
<h3 id="总结">总结</h3>
<ul>
<li><p>不要求自定义域名，无脑上码云</p>
</li>
<li><p>要自定义域名上 GitHub Page or Vercel</p>
</li>
<li><p>Coding 不推荐</p>
</li>
</ul>
<p>那么本博客目前并没有采用上述方式进行部署，但全部体验过。因为域名进行了备案，就直接采用了腾讯的<strong>静态网站托管</strong>。</p>
<p>有一说一，国内各家的 CDN 计费规则是真的复杂，第一次看完基本都一头雾水，这时候腾讯的云开发出现了。云开发中包含了静态网站托管，专为静态网站而生。计费规则很简单，<code>流量费用</code> + <code>空间费用</code>，而且自动部署到 CDN 上，速度超快。</p>
<p>至于怎么使用云开发部署静态博客，官方已经给出了详细教程 <a href="https://cloud.tencent.com/document/product/1210/43365">静态网站托管 搭建 Hexo - 最佳实践 - 文档中心 - 腾讯云</a>。</p>
<p>当然，这是收费的，不过挺便宜的，正常小站一个月不超过一元，而且还可以申请腾讯的 <a href="https://cloud.tencent.com/act/pro/wh99">云开发网站托管「9.9包年」赞助计划</a>。</p>
<h2 id="自动部署">自动部署</h2>
<p>接下来进入重点，利用 GitHub Action 实现自动化部署，如果你还不知道 GitHub Action 是什么，可以看看 <a href="https://github.com/features/actions">官方介绍</a>，简单来说，以你的仓库为根目录，给你一台电脑，帮你完成一些事情。如果想进一步了解，可以看看 <a href="https://zkqiang.cn/posts/e8ed6836/">编写自己的 GitHub Action，体验自动化部署</a></p>
<h3 id="连接-github">连接 GitHub</h3>
<p>保证你的整个博客文件夹已 <code>push</code> 到了GitHub 上。如果没有，新建一个仓库 <code>Public</code> or <code>Private</code>  均可，然后将本地本地与仓库连接。</p>
<p><code>username</code> 替换成用户名，<code>repo</code> 替换成仓库名</p>
<pre><code class="language-bash">git init
git add .
git commit -m &quot;first commit&quot;
git remote add origin https://github.com/username/repo.git
git push -u origin master</code></pre>
<p>:::warning 🚨 注意</p>
<p>如果仓库为 <code>Public</code> 请不要将隐私内容直接写在文件中，暂时用一些单词替换，后续编写自动部署文件时有方法解决</p>
<p>:::</p>
<h3 id="编写-github-action">编写 GitHub Action</h3>
<p>从这里开始，默认你已经看完之前提到的『编写自己的 GitHub Action，体验自动化部署』，或者对 GitHub Action 有初步的了解，知道大致操作。</p>
<p>以我的<a href="https://JalenChuh.cn">个人主页</a>为例，是由 Vue.js 构建的，部署在腾讯云静态网站托管。GitHub 仓库地址：<a href="https://github.com/jalenchuh/homepage">homepage</a></p>
<p>共分为 <code>Setup</code> <code>Build</code> <code>Lint</code> <code>Deploy</code> 四个步骤</p>
<ul>
<li><p>Setup: 安装 node 环境</p>
</li>
<li><p>Build: 构建</p>
</li>
<li><p>Lint: Lint 代码</p>
</li>
<li><p>Deploy: 推送到腾讯静态网站托管</p>
</li>
</ul>
<pre><code class="language-yaml">name: Deploy

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-node@v1
      with:
        node-version: &#39;10.x&#39;

    - name: Setup
      run: npm install

    - name: Build
      run: npm run build

    - name: Lint
      run: npm run lint

    - name: Deploy
      id: deployStatic
      uses: TencentCloudBase/cloudbase-action@v1.1.1
      with:
        secretId: ${{ secrets.SECRET_ID }}
        secretKey: ${{ secrets.SECRET_KEY }}
        envId: ${{ secrets.ENV_ID }}
        staticSrcPath: dist</code></pre>
<p>:::tip 对于隐私数据须在 secrets 中设置</p>
<p>文件中出现的 <code>secrets.xxx</code> 须在仓库的 <code>settings &gt; secrets</code> 中设置</p>
<p>新建 <code>secrests</code> 时，<code>name</code> 为 <code>xxx</code> ，<code>Value</code> 为内容</p>
<p>:::</p>
<h3 id="部署到-github-page">部署到 GitHub Page</h3>
<p>[^1]</p>
<pre><code class="language-yaml">name: Deploy                      # Actions 显示的名字，随意设置

on: [push]                        # 监听到 push 事件后触发

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout              # 拉取当前执行 Actions 仓库的指定分支
      uses: actions/checkout@v2
      with:
        ref: master

    - name: Update Submodule      # 如果仓库有 submodule，在这里更新，没有则删掉此步骤
      run: |
        git submodule init
        git submodule update --remote

    - name: Setup Node            # 安装 Node 环境
      uses: actions/setup-node@v1
      with:
        node-version: &quot;10.x&quot;

    - name: Hexo Generate         # 安装 Hexo 依赖并且生成静态文件
      run: |
        rm -f .yarnclean
        yarn --frozen-lockfile --ignore-engines --ignore-optional --non-interactive --silent --ignore-scripts --production=false
        rm -rf ./public
        yarn run hexo clean
        yarn run hexo generate

    - name: Hexo Deploy           # 部署步骤，这里以 hexo deploy 为例
      env:
        SSH_PRIVATE: ${{ secrets.SSH_PRIVATE }}
        GIT_NAME: yourname
        GIT_EMAIL: your@email.com
      run: |
        mkdir -p ~/.ssh/
        echo &quot;$SSH_PRIVATE&quot; | tr -d &#39;\r&#39; &gt; ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts
        git config --global user.name &quot;$GIT_NAME&quot;
        git config --global user.email &quot;$GIT_EMAIL&quot;
        yarn run hexo deploy</code></pre>
<h3 id="部署到腾讯静态托管">部署到腾讯静态托管</h3>
<p>建议使用<a href="https://github.com/TencentCloudBase/cloudbase-action">官方 Action</a></p>
<p>示例代码</p>
<pre><code class="language-yaml">name: Deploy

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: &#39;10.x&#39;

    - name: Setup Hexo
      run: |
        npm install hexo-cli -g
        npm install

    - name: Generate
      run: hexo clean &amp;&amp; hexo g

    - name: Deploy
      id: deployStatic
      uses: TencentCloudBase/cloudbase-action@v1.1.1
      with:
        secretId: ${{ secrets.SECRET_ID }}
        secretKey: ${{ secrets.SECRET_KEY }}
        envId: ${{ secrets.ENV_ID }}
        staticSrcPath: public</code></pre>
<p>部署 Hexo 的过程中，<code>Deploy</code> 之前的都是差不多，所有之后只需要修改 <code>Deploy</code> 之后的内容就行。</p>
<h3 id="部署到-腾讯cos">部署到 腾讯COS</h3>
<p>建议使用<a href="https://github.com/zkqiang/tencent-cos-action">zkqiang/tencent-cos-action</a></p>
<h3 id="其他">其他</h3>
<p>大部分都是有官方 Action 的，即使没有也会有其他人编写的，或参考官方文档。</p>
<h2 id="隐私问题">隐私问题</h2>
<p>可以直接使用 Private 仓库解决。</p>
<p>对于 Publlic 仓库，可以使用 <code>sed</code> 命令。</p>
<p>比如我在博客配置 <code>_config.yml</code> 文件中有百度推送的代码</p>
<pre><code class="language-yaml">baidu_url_submit:
  count: 200
  host: blog.JalenChuh.cn
  token: baiduToken
  path: baidu_urls.txt</code></pre>
<p>其中 <code>token</code> 属于隐私内容，不能公开，那么我们可以使用 <code>baiduToken</code> 将 <code>token</code> 代替</p>
<p>而之后在编写的 Action 的时候将 <code>token</code> 存入 <code>secrets</code> ，利用 <code>sed</code> 命令对 <code>baiduToken</code> 进行替换即可。</p>
<pre><code class="language-bash">sed -i &quot;s/baiduToken/${baiduToken}/&quot; _config.yml</code></pre>
<p><code>sed -i</code> 用法为 <code>sed -i &#39;s/原字符串/新字符串/&#39; 文件路径</code></p>
<p>结合 <code>secrets</code> 使用</p>
<pre><code class="language-yaml">- name: env
  env:
    baiduToken: ${{ secrets.baiduToken }}

  run: sed -i &quot;s/baiduToken/${baiduToken}/&quot; _config.yml</code></pre>
<h2 id="自动提交百度收录">自动提交百度收录</h2>
<p>解决了这个问题我们就可以进行一些更好玩的了，比如百度自动推送</p>
<p>首先确保安装了 <code>hexo-baidu-url-submit</code>，并且 <code>package.json</code> 的 <code>dependencies</code> 中含有该插件。</p>
<p>:::tip</p>
<p><code>package.json</code> 中如果没有，必须使用 <code>npm i hexo-baidu-url-submit --save</code> 安装</p>
<p>:::</p>
<p>然后还是该文件，修改 <code>scripts</code> 部分</p>
<pre><code class="language-diff">&quot;scripts&quot;: {
  .......
  &quot;xx&quot;: &quot;xxxx&quot;,
+  &quot;baidupush&quot;: &quot;hexo deploy&quot;
},</code></pre>
<p>:::warning 必须遵循 json 规范</p>
<p>最后一行，也就是 <code>baidupush</code> 这行结尾没有逗号，而倒数第二行必须有逗号</p>
<p>:::</p>
<p>百度给了几千条的限额，你可以通过 <code>hexo deploy &amp;&amp; hexo deploy ...</code> 执行多次，把全部额度用完，但貌似一个链接重复提交会被百度降权（不懂 SEO），所以看你自己了。</p>
<p>但是还有一个问题，如果你使用的是 GitHub Page 之类的，每次推送的同时都会把博客也推送一遍，没这必要，那么我们可以新建一个配置文件 <code>_baidupush.yml</code> ，将 <code>_config.yml</code> 中我内容复制进去，再修改末尾 <code>deploy</code> 部分，仅保留百度推送。</p>
<pre><code class="language-diff">deploy:
  - type: baidu_url_submitter
-  - type: git
-    repo: git@github.com:jalenchuh/test.git
-    branch: master</code></pre>
<p>那么之前命令中的所有 <code>hexo deploy</code> 就需要相应的替换成 <code>hexo deploy --config _baidupush.yml</code></p>
<p>然后在 <code>secrets</code>  中存入 <code>baiduToken</code></p>
<p>并编写 Action，每天北京时间 0 点自动执行</p>
<pre><code class="language-yaml">name: baiduPush

on:
  schedule:
    - cron: &#39;0 16 * * *&#39; # Github Action 使用的是 UTC 时间

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: &#39;10.x&#39;

    - name: Setup Hexo
      run: |
        npm install hexo-cli -g
        npm install

    - name: BAIDU env
      env:
        baiduToken: ${{ secrets.baiduToken }}

      run: sed -i &quot;s/baiduToken/${baiduToken}/&quot; _baidupush.yml # 替换 baiduToken

    - name: generate
      run: hexo clean &amp;&amp; hexo g

    - name: push
      run: npm run baidupush # 执行前面写好的命令</code></pre>
<h2 id="最后">最后</h2>
<p>著名的 CI 工具还有 Travis CI，相比之下我觉得 GitHub Action 更加容易上手，而且和 GitHub 直接集成算是它的一大优势吧。</p>
<p>不过还是有一些缺点的，比如没办法本地调试，第一次使用 Action 列表中总是一片 :x:。还有就是出错之后 <code>re run</code> 只能全部重来，没办法指定从某一个 steps 开始</p>
<p>当然了，已经做的非常不错了。同时，期待下即将推出的 Codespaces。</p>
<p>[^1]: GitHub Page 部署代码来自 <a href="https://hexo.fluid-dev.com/posts/actions-deploy/">https://hexo.fluid-dev.com/posts/actions-deploy/</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[写在计算机会考前]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/before-computer-exam/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/before-computer-exam/</guid>
            <pubDate>Sat, 20 Jun 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>咳咳咳，因为新冠的影响，2020 年已经快要过去一半了，这半年里啥也没干，光见证历史了</p>
<ul>
<li>1.23 武汉封城</li>
<li>1.31 英国脱欧</li>
<li>3 月 美股熔断 4 次</li>
<li>2020 奥运会延期至 2021</li>
<li>2020 高考推迟</li>
<li>4.4 10:00 降半旗、防空警报鸣响、行人止步、车辆停驶鸣笛、全国人民默哀3分钟... 愿逝者安息</li>
<li>4.20 原油期货合约跌至负数</li>
<li>...</li>
</ul>
<p>似乎预料到了以后的历史考题（逃</p>
<blockquote>
<p>2020 年东京奥运会于何时举办（ ）  </p>
<p>A. 2019 B. 2020 C. 2021 D. 未举办</p>
<p>如果你现在穿越回 2020，你能看见几次美股熔断（ ）</p>
<p>A.0 B.1 C.2 D.3</p>
</blockquote>
<h3 id="开学">开学</h3>
<p>2020-05-12 终于开学了，但随之而来的是开学考，啊这...
2020-05-12 傍晚，怀着忐忑紧张的心情到家，放下书包，还没饭吃，拿出语文书，打开手机，瞄了一眼社会主义群（聊天群），我...我...woc</p>
<blockquote>
<p>请转达孩子，接学校通知，阶段一考试推迟，明天按课表正常上课(周二)，请同学们作好准备，准时错峰到校！谢谢</p>
</blockquote>
<p>一个人发出了这样一条消息，然后...然后就炸了，他说是班级微信群里的，接着又有人说他们老师也发了，接着！我们班主任也在微信群里发了！</p>
<p>我...我...我...哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈</p>
<p>没亲身经历过就绝对没办法体会到这种感受，当时真的手在抖，就那种感受，你知道吧，就...没办法用语言描述</p>
<p>今天去学习领了书，玉辉胖了但还是一如既往的喜欢灌鸡汤，珍珍感觉完全变了样，dxy 还是一如既往的<del>有点憨</del></p>
<p>明天也就正式开学了，嗯加油吧</p>
<h3 id="关于博客">关于博客</h3>
<p><del>建议移步副站 <a href="https://blog.royce2003.top/posts/7174.html#%E5%85%B3%E4%BA%8E%E5%8D%9A%E5%AE%A2">副站链接</a>
如你所见，这是一个和之前完全不一样的副站，原来用的是 Fluid 主题，但是现在用的还是 Fluid 主题，是的，你没看错，只不过整体的改动比较大。折腾久了，慢慢觉得这种简约但不简陋的设计越来越好看
目前的主页参考 <a href="https://dmx.pub">DmxZ</a>，可以去看看他写的<a href="https://github.com/a2396837/hexo-theme-blank">主题</a>，非常不错
目前会尽量保持这两边同时更新，主站目前还是在用原来的，说不定哪天副站这边完善了就会主副互换
现在的代码真的是非常非常的乱，但是由于用了 Acion，还是放在了 GitHub 上，如果有兴趣可以看看 <a href="https://github.com/Royce003/simpleHexo">simpleHexo</a>
因为是自己用的，所以之后可能会把各类东西写死</del></p>
<p>用 Hexo 也差不多有半年了，也因为这个比暑假还长的寒假，折腾了非常非常多，一直都想自己写一个主题，但是，你知道的，因为比较菜，还没能力写，不过已经在慢慢推进了，目前进度 <del>0.01/100</del>，也因为开学了，没什么时间再继续了，所以，只好以后再来咯</p>
<hr>
<p>文章题目是『写在计算机会考前』，但和计算机会考没什么大关系。</p>
<p>还是那个周六，一如既往，唯独不一样的就是这个周六在家，而上个周六的这个时候在学校上课。因为会考，学校需要做考场，我们有幸获得了 3 天的假期。而其中有半天我们也需要参加计算机会考，但没有丝毫的紧张感，毕竟还是挺简单的，操作题 60 分，基本拿满，选择错个几题，也还有 95 :laughing: 。</p>
<p>顺便吐槽，有些选择题就不能跟上时代步伐吗？碰到一题，大概意思『不属于常用接入方式的是：』答案是无线连接。不是吧阿 sir，都 0202 年了，无线还不属于常用吗？不过 u1s1，电脑课还是挺有意义的，也确实了解到了一些以前半懂或者完全不懂的东西（虽然教的大部分都是没用的东西）。</p>
<h3 id="第一张银行卡">第一张银行卡</h3>
<p>上周，终于拿到了几个月之前申请的海贼王联名卡，贼帅。</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/before-computer-exam/01.png?w=1280&fmt=webp" alt="海贼王联名卡"></p>
<p>办的是招行的，而且招行 APP 活动巨多，新用户办卡绑定之后直接送 30，没套路，直接打到你卡里。其他直接送钱的活动也非常的，感觉我每个月的话费有着落了。不同的卡还附带不同福利，B站 花嫁卡送半年大会员，海贼王的卡送马克杯，三个样式随机一个，贼幸运，我收到了最喜欢的那个样式</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/before-computer-exam/02.png?&fmt=webp" alt="马克杯"></p>
<p>顺便，拿卡需要收验证码，这是我没想到的，打电话来的时候就告诉要带身份证啊。然后它用的翻译是「索罗」.......</p>
<h3 id="又是聊的折腾">又是聊的折腾</h3>
<p>这周还找了个时间把 <a href="https://www.royce2003.top">主页</a> 重新整了下，原来的过于花里胡哨，用上了基于 vue 的 <a href="https://github.com/spencerwooo/portfolio">spencerw ooo/portfolio</a>，也顺便迁移到了 <a href="https://cloud.tencent.com/product/tcb">TCB</a> 和博客放在一起。感觉现在 tcb 非常良心啊，拿到赞助，一共可买 4 个 0.9/个 的流量包，希望明年还能有这样的活动！</p>
<p>以前对 vue 还只处于听说过的阶段，这次真的就感受到了 vue 的强大，当然，同时感受到的还有自己的菜 :cry:  （突然就有想去折腾 vuepress 的想法了嘿嘿嘿），不过我这种啥东西都半吊子的，学 vue 的想法还是先放放吧。</p>
<p>折腾的主页，就顺便把副站的主题也换了，这次用的是 <a href="https://github.com/ChrAlpha/hexo-theme-cards">cards</a>。</p>
<p>其实也有换掉 Fluid 的想法，用了 bootstrap，感觉有那么一点臃肿，但.....至少今年内不会换，还是少折腾吧。</p>
<h3 id="快乐🏓">快乐🏓</h3>
<p>周五下午，布置考场，两节课上完直接就放学了，乒乓球场上也一如既往高一只有一张桌，剩下都是高二的，谁让他们比我们早 10 分钟放学呢 :imp: ，他们好像完全不在意第二天的会考，真的这么简单吗？记得上学期的会考，有人10分钟不到做完了物理，啊这。</p>
<p>高一的那一桌本身是我们的，我和张总都下了之后去坏掉的小桌练了会儿，班上的另几个打了一会先回宿舍了一下，之后桌上人就多了起来，然后......</p>
<p>之后就溜到了边上小区的老年活动中心(x) 去打，那的老大爷是真的猛啊 :dizzy_face: 今天也是第一次打到不想打，太累了</p>
<hr>
<p>最后，最近删了挺多友链的，观念逐渐开始转变，先有友情后有链接，嗯，抱歉。</p>
<p>写作业去了。</p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[P3372 【模板】线段树 1]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/segment-tree-1/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/segment-tree-1/</guid>
            <pubDate>Fri, 05 Jun 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="题目">题目</h2>
<p>[^1]</p>
<h3 id="题目描述">题目描述</h3>
<p>如题，已知一个数列，你需要进行下面两种操作：</p>
<ol>
<li>将某区间每一个数加上 $k$。</li>
<li>求出某区间每一个数的和。</li>
</ol>
<h3 id="输入格式">输入格式</h3>
<p>第一行包含两个整数 $n, m$，分别表示该数列数字的个数和操作的总个数。</p>
<p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p>
<p>接下来 $m$ 行每行包含 $3$ 或 $4$ 个整数，表示一个操作，具体如下：</p>
<ol>
<li><code>1 x y k</code>：将区间 $[x, y]$ 内每个数加上 $k$。</li>
<li><code>2 x y</code>：输出区间 $[x,y]$ 内每个数的和。</li>
</ol>
<h3 id="输出格式">输出格式</h3>
<p>输出包含若干行整数，即为所有操作 2 的结果。</p>
<h3 id="输入输出样例">输入输出样例</h3>
<p><strong>输入 #1</strong></p>
<pre><code class="language-text">5 5
1 5 4 2 3
2 2 4
1 2 3 2
2 3 4
1 1 5 1
2 1 4</code></pre>
<p><strong>输出 #1</strong></p>
<pre><code class="language-text">11
8
20</code></pre>
<h3 id="说明提示">说明/提示</h3>
<p>对于 $30%$ 的数据：$n \le 8$，$m \le 10$。<br>对于 $70%$ 的数据：$n \le {10}^3$，$m \le {10}^4$。<br>对于 $100%$ 的数据：$1 \le n, m \le {10}^5$。</p>
<p>保证任意时刻数列中任意元素的和在 $[-2^{63}, 2^{63})$ 内。</p>
<p><strong>【样例解释】</strong></p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/2024/01.png?fmt=webp" alt="样例解释"></p>
<h2 id="题解">题解</h2>
<p>:::tip
想认真学推荐看看这篇两篇</p>
<p><a href="https://www.cnblogs.com/TheRoadToTheGold/p/6254255.html">浅谈线段树 - TRTTG - 博客园</a>
<a href="https://oi-wiki.org/ds/seg/">线段树 - OI Wiki</a>
:::</p>
<h3 id="建树">建树</h3>
<p>一直二分，直到 到了叶子节点，输入数据，==记住 return==</p>
<p>非叶子节点的值为 左儿子+右儿子</p>
<pre><code class="language-cpp">// 建树，k 当前节点
void build(LL l, LL r, LL k) {
    LL mid = (l + r) / 2;
    tree[k].l = l, tree[k].r = r;
    if (l == r) { // 判断叶子节点
        tree[k].w = read();
        return;
    }
    build(l, mid, 2*k);
    build(mid+1, r, 2*k+1);
    tree[k].w = tree[2*k].w + tree[2*k+1].w;
}</code></pre>
<h3 id="懒标记">懒标记</h3>
<blockquote>
<p>A 有两个儿子，一个是 B，一个是 C。</p>
<p>有一天 A 要建一个新房子，没钱。刚好过年嘛，有人要给 B 和 C 红包，两个红包的钱数相同都是 $1$ 元，然而因为 A 是父亲所以红包肯定是先塞给 A 咯~</p>
<p>理论上来讲 A 应该把两个红包分别给 B 和 C，但是……缺钱嘛，A 就把红包偷偷收到自己口袋里了。</p>
<p>A 高兴地说：「我现在有 $2$ 份红包了！我又多了 $2 \times 1 = 2$ 元了！哈哈哈~」</p>
<p>但是 A 知道，如果他不把红包给 B 和 C，那 B 和 C 肯定会不爽然后导致家庭矛盾最后崩溃，所以 A 对儿子 B 和 C 说：「我欠你们每人 $1$ 份 $1$ 元的红包，下次有新红包给过来的时候再给你们！这里我先做下记录……嗯……我欠你们各 $1$ 元……」</p>
<p>儿子 B、C 有点恼怒：「可是如果有同学问起我们我们收到了多少红包咋办？你把我们的红包都收了，我们还怎么装？」</p>
<p>父亲 A 赶忙说：「有同学问起来我就会给你们的！我欠条都写好了不会不算话的！」</p>
<p>这样 B、C 才放了心。[^2]</p>
</blockquote>
<p>举个例子：</p>
<p>要求 $4 \backsim 5$ 的数都加上 $2$</p>
<p>那么我们现在只需要将其父亲节点 $2$ 的懒标记 $+2$</p>
<p>需要用到的时候将懒标记下传给子节点</p>
<p>下传操作：</p>
<ol>
<li><p>两个子节点的懒标记分别加上父亲节点的懒标记的值</p>
</li>
<li><p>子节点的值分别加上 $(r-l+1) \times 父亲节点的懒标记值$。$(r-l+1)$ 表示该节点之下还有多少节点，这里必须乘父亲节的懒标记的值，而不是自己的懒标记，因为自身的懒标记可能还包含上一次下传的值</p>
</li>
<li><p>父亲节点懒标记归零</p>
</li>
</ol>
<pre><code class="language-cpp">// 懒标记下传，k 当前节点
void down(LL k) {
    tree[k * 2].f += tree[k].f;
    tree[k*2 + 1].f += tree[k].f;

    tree[k * 2].w += tree[k].f * (tree[k*2].r - tree[k*2].l + 1);
    tree[k*2 + 1].w += tree[k].f * (tree[k*2+1].r - tree[k*2+1].l + 1);

    tree[k].f = 0;
}</code></pre>
<h3 id="区间修改">区间修改</h3>
<p>$n = [l, r]$ 需要修改的区间，$m = [s, t]$ 当前区间</p>
<p>$n, m$ 只满足以下三种关系的一种</p>
<ol>
<li>$m \subseteq n$</li>
<li>$m \cap n$ 不为空</li>
<li>$n \subseteq m$</li>
</ol>
<h4 id="1">1</h4>
<p>第一种情况 $m \subseteq n$，直接返回当前区间 $m$ 的值就行了</p>
<h4 id="2">2</h4>
<p>第二种情况 $m \cap n$ 不为空</p>
<p>令 $mid= \frac{s+t}{2}$</p>
<ol>
<li>$l \le mid$ 则说明待修改区间（一部分）在当前节点的左孩子</li>
<li>$r &gt; mid$ 则说明待修改区间（一部分）在当前节点的右孩子</li>
</ol>
<p>重复多次后就得到了情况 1
（画个图模拟下就明白了）</p>
<h4 id="3">3</h4>
<p>第三种情况 $n \subseteq m$</p>
<p>解决方法和情况 2 相同</p>
<pre><code class="language-cpp">// 区间修改 [l, r] 修改区间，[s, t]当前区间，k 当前节点，addition 修改的值
void update(LL l, LL r, LL k, LL addition) {
    LL s = tree[k].l, t = tree[k].r;
    LL mid = (s + t) / 2;

    if(l&lt;=s &amp;&amp; t&lt;=r) {
        tree[k].f += addition;
        tree[k].w += addition * (t - s + 1);
        return;
    }

    // 不满足上面的 if，所以需要修改子节点，所以需要下传懒标记
    if(tree[k].f) down(k);
    if(l &lt;= mid) update(l, r, k*2, addition);
    if(r &gt; mid) update(l, r, 2*k+1, addition);
    tree[k].w = tree[2*k].w + tree[2*k+1].w;
}</code></pre>
<h3 id="区间查询">区间查询</h3>
<p>与区间修改基本一样</p>
<p>$n = [l, r]$ 需要查询的区间，$m = [s, t]$ 当前区间</p>
<p>$n, m$ 只满足以下三种关系的一种</p>
<ol>
<li>$m \subseteq n$</li>
<li>$m \cap n$ 不为空</li>
<li>$n \subseteq m$</li>
</ol>
<pre><code class="language-cpp">// 区间查询，[l, r] 查询区间，[s, t]当前区间，k 当前节点
LL getsum(LL l, LL r, LL k) {
    LL s = tree[k].l, t = tree[k].r;
    LL mid = (s + t) / 2, sum = 0;

    // 不满足上面的 if，所以需要修改子节点，所以需要下传懒标记
    if(l&lt;=s &amp;&amp; t&lt;=r) return tree[k].w;

    if(tree[k].f) down(k);
    if(l &lt;= mid) sum += getsum(l, r, k*2);
    if(r &gt; mid) sum += getsum(l, r, 2*k+1);
    return sum;
}</code></pre>
<h3 id="代码">代码</h3>
<pre><code class="language-cpp">#include &lt;cstdio&gt;
#define LL long long

LL n, m;
struct node {
    LL l, r, w, f; // w 值，f 懒标记
}tree[400001]; // 大小 4 * n

LL read() {
    bool flag = 0; LL x = 0; char ch = getchar();
    while(ch&lt;&#39;0&#39; || ch&gt;&#39;9&#39;) {if (ch == &#39;-&#39;) flag = 1; ch = getchar();}
    while(ch&gt;=&#39;0&#39; &amp;&amp; ch &lt;= &#39;9&#39;) {x *= 10; x += ch - &#39;0&#39;; ch = getchar();}
    return flag ? - x : x;
}

// 建树，k 当前节点
void build(LL l, LL r, LL k) {
    LL mid = (l + r) / 2;
    tree[k].l = l, tree[k].r = r;
    if (l == r) { // 判断叶子节点
        tree[k].w = read();
        return;
    }
    build(l, mid, 2*k);
    build(mid+1, r, 2*k+1);
    tree[k].w = tree[2*k].w + tree[2*k+1].w;
}

// 懒标记下传，k 当前节点
void down(LL k) {
    tree[k * 2].f += tree[k].f;
    tree[k * 2].w += tree[k].f * (tree[k*2].r - tree[k*2].l + 1);
    tree[k*2 + 1].f += tree[k].f;
    tree[k*2 + 1].w += tree[k].f * (tree[k*2+1].r - tree[k*2+1].l + 1);
    tree[k].f = 0;
}

// 单点修改，k 当前节点
void add(LL k, LL addition) {
    LL l = tree[k].l, r = tree[k].r;
    LL mid = (l + r) / 2;

    if (l == r) {
        tree[k].w += addition;
        return;
    }

    // 不满足上面的 if，所以需要修改子节点，所以需要下传懒标记
    if (tree[k].f) down(k);

    if (x &lt;= mid) add(2 * k);
    else add(2*k + 1);
    tree[k].w = tree[2*k].w + tree[2*k+1].w;
}

// 单点查询，k 当前节点
LL ask(LL k) {
    LL l = tree[k].l, r = tree[k].r;
    LL mid = (l + r) / 2;

    // 不满足上面的 if，所以需要修改子节点，所以需要下传懒标记
    if (l == r) return tree[k].w;

    if (x &lt;= mid) ask[2 * k];
    else ask(2*k + 1)
}

// 区间修改 [l, r] 修改区间，[s, t]当前区间，k 当前节点，addition 修改的值
void update(LL l, LL r, LL k, LL addition) {
    LL s = tree[k].l, t = tree[k].r;
    LL mid = (s + t) / 2;

    if(l&lt;=s &amp;&amp; t&lt;=r) {
        tree[k].f += addition;
        tree[k].w += addition * (t - s + 1);
        return;
    }

    // 不满足上面的 if，所以需要修改子节点，所以需要下传懒标记
    if(tree[k].f) down(k);
    if(l &lt;= mid) update(l, r, k*2, addition);
    if(r &gt; mid) update(l, r, 2*k+1, addition);
    tree[k].w = tree[2*k].w + tree[2*k+1].w;
}

// 区间查询，[l, r] 查询区间，[s, t]当前区间，k 当前节点
LL getsum(LL l, LL r, LL k) {
    LL s = tree[k].l, t = tree[k].r;
    LL mid = (s + t) / 2, sum = 0;

    // 不满足上面的 if，所以需要修改子节点，所以需要下传懒标记
    if(l&lt;=s &amp;&amp; t&lt;=r) return tree[k].w;

    if(tree[k].f) down(k);
    if(l &lt;= mid) sum += getsum(l, r, k*2);
    if(r &gt; mid) sum += getsum(l, r, 2*k+1);
    return sum;
}

int main() {
    n = read(), m = read();
    build(1, n, 1);

    while (m--) {
        LL t = read(), x = read(), y = read();
        if (t == 2)
            printf(&quot;%lld\n&quot;, getsum(x, y, 1, n, 1));
        else {
            LL k = read();
            update(x, y, 1, n, 1, k);
        }
    }
    return 0;
}</code></pre>
<p>学完可以做做 <a href="https://www.luogu.com.cn/problem/P2068">P2068 统计和</a></p>
<p>[^1]: 题目来源 <a href="https://www.luogu.com.cn/problem/P3372">【模板】线段树 1 - 洛谷</a>
[^2]: 来自 <a href="https://oi-wiki.org/ds/seg/#_4">线段树 - OI Wiki</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[HandShaker 好看实用的手机管理工具]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/handshaker/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/handshaker/</guid>
            <pubDate>Sun, 26 Apr 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>经常为了手机电脑间传文件烦恼，想着什么时候在 Windows 和 Android 之间能有 iCloud 的体验 <del>（我知道我在想:peach:）</del>。或许 OneDrive 能实现类似体验，但是我这同步文件的速度并不是很理想，手机端传一个文件上去，电脑端要过一段时间才能同步出来，那我还不如用 QQ 传文件</p>
<p>在网上:surfer:时，看到了别人推荐这款软件，就下下来试了试，没报太大希望，但是用了一段时间，真的超 nice 啊</p>
<h3 id="简介">简介</h3>
<p>HandShaker[^1] 是一款轻便易用的 Android 手机管理工具，融合了 Mac 系统和 Smartisan OS 的界面风格和操作逻辑，可直观、简洁的帮助用户管理 Android 手机中的照片、视频、音乐等文件。[^2]</p>
<p>HandShaker，<strong>握手</strong>？那咱<strong>交个朋友</strong>？还是熟悉的锤子风格啊</p>
<h3 id="特性">特性</h3>
<ul>
<li>支持<strong>无线</strong>链接</li>
<li>可同步全部文件（双端完全同步）</li>
<li><strong>支持拖拽操作</strong></li>
<li>支持文件预览</li>
<li>闪念胶囊</li>
</ul>
<p>不夸张的说，我认为这或许是最好的<strong>非系统的</strong>安卓手机管理工具，全平台通用，不限制机型（就我目前发现的软件而言）</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/01.png?w=1280&fmt=webp" alt="HandShaker"></p>
<p>UI 还是锤子的一贯风格
看惯了 Material Design，再看看锤子的扁平感觉也挺不错的:laughing:</p>
<p>虽然:hammer:现在一言难尽，但是它出的软件可以说大部分都是精品，甚至你可以看到许多非数码圈的人在用锤子便签</p>
<h4 id="无线链接">无线链接</h4>
<p>连接速度还不错的，也非常方便，第一次连接好像要在手机上同意
<del>我第一次连的时候狂点连接，半点反应都没有，都想卸载了，然后发现是自己 zz 了</del></p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/02.gif?w=1280" alt="无线链接"></p>
<p>还可通过二维码和 USB 数据线连接</p>
<h4 id="文件同步">文件同步</h4>
<p>不仅能同步全部文件，还能将相册、音乐、视频和下载进行单独分类</p>
<p>相册页面还能按照手机上的不同相册来显示</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/03.png?w=1280&fmt=webp" alt="文件同步"></p>
<p>同时，如果开启完全同步，还可将相册保存在本地，即使与手机断开连接，也能操作</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/04.png?w=1280&fmt=webp" alt="完全同步"></p>
<p>但这里的相册有个小问题，<strong>相机相册</strong>中的照片并不是系统相机而是<strong>谷歌相机</strong>，这就有的迷了，不知道是不是只有 Flyme 这样</p>
<p>其他页面也感觉非常 nice</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/05.png?w=1280&fmt=webp" alt="音乐界面"></p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/06.png?w=1280&fmt=webp" alt="视频界面"></p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/07.png?w=1280&fmt=webp" alt="下载界面"></p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/08.png?w=1280&fmt=webp" alt="文件页面"></p>
<p>文件页面的图标能看得出非常用心</p>
<h4 id="拖拽操作">拖拽操作</h4>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/09.gif?w=1280" alt="拖拽操作"></p>
<p>支持全类型文件双向拖拽，速度非常快，比传文件的那些软件方便多了</p>
<p>挑了个视频文件测试，文件过大时提示 ”当前传输文件过大，建议通过 USB 数据线传输“，还是非常细心啊，并且你也可以不接受建议 :joy:</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/10.png?w=1280&fmt=webp" alt="提示"></p>
<p>但是无线传输的速度还是同不错的，能达到将近 10MB/S</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/11.png?w=1280&fmt=webp" alt="无线传输"></p>
<p>而 USB 传输的速度能达到将近 20MB/S</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/12.png?w=1280&fmt=webp" alt="USB 传输"></p>
<p>基本满足了传输需求，比 OneDrive 的玄学速度好太多了</p>
<h4 id="文件预览">文件预览</h4>
<p>文件预览在我这有点玄学，是我的食用方法不对？和拖拽一样传文件到本地，但是速度只有 2MB/s 左右，偶尔能跑的和之前一样的 8MB/s</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/13.png?w=1280&fmt=webp" alt="文件预览"></p>
<p>所以用来预览大文件不太方便，不过图片什么的还是非常方便的，图片的预览会先跳出略缩图，再加载清楚</p>
<p>还内置了音乐播放器，可以直接播放音乐，不过功能比较简陋</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/14.png?w=1280&fmt=webp" alt="音乐播放器"></p>
<h4 id="闪念胶囊">闪念胶囊</h4>
<p>真的超级超级 nice 啊，非常好用，之前一直在用微软的 ToDo，手机上可以同步，UI 也做的挺不错的</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/15.png?w=1280&fmt=webp" alt="闪念胶囊"></p>
<p>不过最近已经开始用闪念胶囊了，至于原因，<del>我自己可能也说不出来</del>，总之，感觉用着更舒服一点吧，虽然这是锤子手机内置的功能，其他手机用不了。但是认真想想，在手机上记录的 ToDo 可能更多是一些零碎的小事情，需要马上去做，记下来只是怕忘了，用负一屏自带的备忘录就可以了，而在电脑上记录的可能则是一些任务规划。</p>
<p>一开始我并不觉得 ToDo 这种东西有用，但是用了一段时间发现还真有用 :joy_cat:，看到那一项一项就贼想把它打勾</p>
<p>虽然说不出什么原因让我换到了闪念胶囊，但是可能就是体验和 UI 吧，还是开头那句话，看惯了现有的设计，再看看锤子的扁平感觉也挺不错的 :laughing:</p>
<p>同样的，也支持一些拖拽，操作很方便</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/16.gif?w=1280" alt="闪念胶囊拖拽"></p>
<p>还能对每个胶囊添加附件，同样可以拖拽
但是对于附件有一些小限制，一个胶囊最多添加 14 个附件</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/17.gif?w=1280" alt="闪念胶囊附件"></p>
<p>当然了，ToDo 必备的日期肯定也是有的</p>
<p><img src="https://rmt.dogedoge.com/fetch/royce/storage/17291/18.png?w=1280&fmt=webp" alt="闪念胶囊日期"></p>
<h3 id="最后">最后</h3>
<p>知乎上一篇写的挺好的文章，某人在评论区撒野，最后真相：没用过，<strong>纯</strong>云体验，但想到前段时间发布的网民收入数据，害，只要自己用着开心就好:stuck_out_tongue_winking_eye:</p>
<p>那么，关于 HandShaker，还有些没提到的地方，就自己探索啦
虽然已经停更了，但还是感谢锤科:smiley_cat:</p>
<p><del>OK 各位，这就是这篇文章的全部内容了，非常感谢你能看到这里，如果你觉得这篇文章写的还不错的话，求赞求收藏求硬币求转发，最重要的是点一个大大的关注</del></p>
<p>[^1]: 下载地址 <a href="https://www.smartisan.com/apps/#/handshaker">Smartisan 应用下载-锤子商城</a>
[^2]: 参考 <a href="http://www.cnmo.com/news/551241.html">体验至上 SmartFinder 更名为 HandShaker</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[加速网页加载？我选择对图片下手]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/use-webp/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/use-webp/</guid>
            <pubDate>Mon, 20 Apr 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>WebP 是一种现代图像格式，可为 Web 上的图像提供出色的无损和有损压缩。使用 WebP ，网站管理员和 Web 开发人员可以创建更小，更丰富的图像，从而使 Web 更快。
与 PNG 相比，WebP 无损图像的尺寸要小 26％。 在同等的 SSIM 质量指数下，WebP 有损图像比同类 JPEG 图像小 25-34％。
无损 WebP 支持透明性（也称为 Alpha 通道），而仅增加 22％ 的字节数。 对于可以接受有损 RGB 压缩的情况，有损 WebP 还支持透明性，与 PNG 相比，文件大小通常小 3 倍。</p>
<h2 id="webp">WebP</h2>
<p>新型图像格式，由 Google 开发[^1]</p>
<h3 id="webp-是如何工作的">WebP 是如何工作的</h3>
<blockquote>
<p>有损 WebP 压缩使用预测编码对图像进行编码，这与 VP8 视频编解码器用于压缩视频中的关键帧的方法相同。预测编码使用相邻像素块中的值来预测块中的值，然后仅对差异进行编码。</p>
<p>无损 WebP 压缩使用已经看到的图像片段来精确地重建新像素。如果找不到有趣的匹配项，它也可以使用本地调色板。</p>
<p>WebP 文件由 VP8 或 VP8L 图像数据以及基于 RIFF 的容器组成。</p>
</blockquote>
<h3 id="兼容性">兼容性</h3>
<p>这种东西就贼烦了:hear_no_evil:</p>
<p>Google Chrome，Firefox，Edge，Opera 等都支持 WebP</p>
<p>[^2]<img src="https://cos.royce2003.top/12013/01.webp-default" alt="支持列表"></p>
<p><del>万恶的</del> Safari 居然还不支持，但当看到下方的 <code>Safari is experimenting with supporting WebP images.</code>[^3] 时，还兴奋了一小会，但点进去之后...</p>
<p><img src="https://cos.royce2003.top/12013/02.webp-default" alt="Safari 支持情况"></p>
<p>2016 年 7 月 19 日 ... wd*md:anger::anger:<br>而且 2016 年就内测过，居然给删了...<br>和 Google 竞争？没有技术做好？我肯定相信前者</p>
<h3 id="使用情况">使用情况</h3>
<p>随便找了几个网站测下</p>
<h4 id="淘宝">淘宝</h4>
<p>淘宝官网中大部分图片均采用了 WebP 格式</p>
<p><img src="https://cos.royce2003.top/12013/03.webp-default" alt="淘宝"></p>
<p>对于部分较小的图片仍采用 JPG or PNG 格式</p>
<p><img src="https://cos.royce2003.top/12013/04.webp-default" alt="淘宝"></p>
<h4 id="京东">京东</h4>
<p>京东官网中大部分图片均采用了 WebP 格式</p>
<p><img src="https://cos.royce2003.top/12013/05.webp-default" alt="京东"></p>
<p>对于极少的图片仍采用 JPG or PNG 格式，如 Logo 等</p>
<p><img src="https://cos.royce2003.top/12013/06.webp-default" alt="京东"></p>
<h4 id="腾讯、阿里云">腾讯、阿里云</h4>
<p>两者均无 WebP 格式图片:-1:</p>
<h3 id="大小">大小</h3>
<p>[^4]
<img src="https://cos.royce2003.top/12013/07.webp-default" alt="PNG WebP 对比1">
<img src="https://cos.royce2003.top/12013/08.webp-default" alt="PNG WebP 对比2"></p>
<p>这些都是较小图片的对比，感觉没差太多，于是乎自己找了几张大图测了下
图片名字为 分辨率 + 大小</p>
<p><img src="https://cos.royce2003.top/12013/09.webp-default" alt="大图"></p>
<p>好像图片有点大诶，由于采用本地软件<a href="https://zhitu.isux.us/">智图</a>转换，CPU 直接拉满了 qaq:sob:</p>
<p><img src="https://cos.royce2003.top/12013/10.webp-default" alt="CPU"></p>
<p>而且两张图图还出错了 qaq，就成功了两张:sob:</p>
<p><img src="https://cos.royce2003.top/12013/11.webp-default" alt="出错"></p>
<p>这数据吓到我了<br>5.7 MB 直接被干到了 74.2 KB<br>11.6 MB 直接被干到了 266 KB</p>
<p>再来看看网络上一个<a href="https://renzhezhilu.gitee.io/webp2jpg-online/">工具</a>的转换情况</p>
<p><img src="https://cos.royce2003.top/12013/12.webp-default" alt="webp2jpg-online"></p>
<p>也是很吓人，不过前两张和智图比一下就效果不怎么样了，但是智图有对图片进行适当压缩，所以...</p>
<p>原本四张图总大小 87.5 MB，现在 15.7 MB<br>反正都 NB 就是了</p>
<p>再说下智图的压缩，和网络上处理的对比了下，除非放大看细节，要不然没差</p>
<p>三张对比图放在蓝奏云上了 <a href="https://jalen.lanzous.com/ibnfvza">https://jalen.lanzous.com/ibnfvza</a></p>
<p>顺便再说下，WebP 是支持动图的，也就是说 GIF 也可以转成 WebP，不过目前我找到的大部分工具都不支持转换，<a href="https://www.upyun.com/webp">又拍云</a>支持</p>
<h3 id="总结">总结</h3>
<p>图片体积小，支持透明、动画，不过少数浏览器不支持<br><del>万恶的</del> Safari 以后应该也是会支持的吧</p>
<p>能有效缓解网页加载过慢的情况 <del>（不配图加载最快了）</del><br>还能有效缓解流量太大导致的费用过高（针对对象存储）</p>
<p>WebP 支持 Alpha 透明和 24-bit 颜色数，例如 PNG8 中的毛边问题是不会出现的</p>
<p>在大幅缩小体积的情况下保证了图片质量，所以还是非常推荐使用的</p>
<p>但是有的时候就很玄学了，我曾试过在 JPG 图片通过压缩工具压缩到体积很小的情况下，再去转成 WebP，体积反而变大了，这说明 JPG 比 WebP 体积更小吗？我觉得应该没有。<br>本身 JPG 的体积已经很小了，图片质量也非常差，但是大部分情况 WebP 在差不多相同大小的情况下，图片质量能明显高出很多，不排除个例</p>
<p>真是因为这些优势，本站已将所有的图片换成了 WebP 格式（图标 icon 和个别特例除外）<br>那对于<del>万恶的</del> Safari 怎么办呢？<br>加几行代码不就好了，<del>简单高效（bushi）</del></p>
<pre><code class="language-js">if ((sessionStorage.getItem(&#39;confirm&#39;) !== &#39;1&#39;) &amp;&amp; (/Safari/.test(navigator.userAgent) &amp;&amp; !/Chrome/.test(navigator.userAgent))) {
    confirm(&#39;抱歉，本博客在 Safari 中大部分图片无法显示&#39;);
    sessionStorage.setItem(&#39;confirm&#39;, &#39;1&#39;);
}</code></pre>
<p>当然了，也可以通过一些 JS 代码来进行转换，但是效率不怎么高</p>
<p>还有就是又拍云支持 WebP 自适应，根据浏览器对 WebP 的支持情况，自动返回对应格式图片</p>
<p>希望 cos 等也能尽快出个这种功能</p>
<h2 id="工具">工具</h2>
<p>最后来推荐些转换工具，当然了，可以自己写代码转换，但是我菜啊，只好找现成的</p>
<h3 id="又拍云">又拍云</h3>
<p><a href="https://www.upyun.com/webp">转换工具地址</a>
这东西事实上是个 Demo，给用户体验用的，所以下载时需要手动右键另存为，不过它没限制上传数量啊</p>
<p><img src="https://cos.royce2003.top/12013/13.webp-default" alt="又拍云"></p>
<p>下面这张图片为 GIF to WebP</p>
<p><img src="https://cos.royce2003.top/12013/14.webp-default" alt="又拍云"></p>
<h4 id="优点">优点</h4>
<ol>
<li>智能压缩</li>
<li>转换速度较快</li>
<li>支持 GIF 转 WebP</li>
</ol>
<h4 id="缺点">缺点</h4>
<ol>
<li>不支持较大图片</li>
<li>只能一张一张转换（可以开多个网页同时进行）</li>
<li>不可自己调节质量</li>
</ol>
<p>如果使用又拍云 CDN，可以开启 WebP 自适应<br>智能判断浏览器是否支持 WebP，来决定返回 WebP 格式图片还是原图，从而减少网络传输消耗</p>
<p><img src="https://cos.royce2003.top/12013/15.webp-default" alt="智能 WebP"></p>
<h3 id="智图">智图</h3>
<p>腾讯的东西，为数不多的一个良心产品，<a href="https://zhitu.isux.us/">官网</a>
这东西不仅可以转成 WebP，还能优化图片</p>
<p>软件中需要在右上角的菜单中打开生成 WebP</p>
<p><img src="https://cos.royce2003.top/12013/16.webp-default" alt="智图"></p>
<p>会在图片相同位置新建一个文件夹，里面包含了智能处理后的图片和一个 WebP 文件夹</p>
<h4 id="优点-1">优点</h4>
<ol>
<li>智能压缩</li>
<li>支持多张图一起转换</li>
</ol>
<h4 id="缺点-1">缺点</h4>
<ol>
<li>不支持较大图片</li>
<li>不支持 GIF 转 WebP</li>
<li>不可自己调节质量</li>
<li>偶尔出现转换失败或提示文件格式错误</li>
</ol>
<p>:::tip
软件中的质量调节对生成 WebP 图片无效
:::</p>
<h3 id="webp-converter">WebP Converter</h3>
<p><a href="https://webp-converter.com/">官网</a></p>
<p><img src="https://cos.royce2003.top/12013/17.webp-default" alt="WebP Converter"></p>
<p>options 可调节质量</p>
<h4 id="优点-2">优点</h4>
<ol>
<li>支持多张图一起转换</li>
<li>可自行调节质量</li>
<li>转换速度较快</li>
</ol>
<h4 id="缺点-2">缺点</h4>
<ol>
<li>限制 8MB 以下</li>
<li>不支持 GIF 转 WebP</li>
</ol>
<h3 id="webp2jpg-online">webp2jpg-online</h3>
<p><a href="https://renzhezhilu.gitee.io/webp2jpg-online/">官网</a></p>
<p><img src="https://cos.royce2003.top/12013/18.webp-default" alt="webp2jpg-online"></p>
<p>options 可调节质量</p>
<h4 id="优点-3">优点</h4>
<ol>
<li>转换速度非常快</li>
<li>支持多张图一起转换</li>
<li>可自行调节质量</li>
<li><strong>可自行裁剪</strong></li>
<li><strong>支持大图片</strong></li>
<li><strong>支持 jpeg, jpg, png, gif, svg, ico, bmp 转 WebP</strong></li>
</ol>
<p>还可以转换成 JPEG PNG ICO</p>
<h4 id="缺点-3">缺点</h4>
<p>好像没找到缺点，还是托管在 gitee 的，访问速度非常快:laughing:</p>
<h3 id="总结-1">总结</h3>
<p>上面推荐的工具用着都还不错，各有各的优势</p>
<p>我在转换时的优先级排序</p>
<p>单张图片：又拍云 &gt; webp2jpg-online &gt; 智图 &gt; WebP Converter</p>
<p>大量图片：智图 &gt; webp2jpg-online &gt; WebP Converter &gt; 又拍云</p>
<p>单张图片最优选又拍云是因为会智能压缩而且比较快，比较方便
多图主要还是因为智图有客户端，方便一点，webp2jpg-online 如果出客户端我肯定毫不犹豫选它</p>
<p>这篇文章在此之前一共 18 张图片，PNG 格式大小为 25.1 MB，Snipaste 直接100质量输出，智图转 WebP 之后仅 645 KB，直接就省了 24 MB 啊:+1:</p>
<p><img src="https://cos.royce2003.top/12013/19.webp-default" alt="总结"></p>
<p>[^1]: 参考 <a href="https://developers.google.com/speed/webp">A new image format for the Web</a>
[^2]: 图片来源 <a href="https://caniuse.com/#feat=webp">Can I use...</a>
[^3]: 来源 <a href="https://www.cnet.com/news/apple-ios-macos-tests-googles-webp-graphics-to-speed-up-web/">Apple tests Google graphics format to speed up websites</a>
[^4]: 图片来源 <a href="https://isparta.github.io/compare-webp/index.html#12345">WebP 示例 (PNG 转 WebP)</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Hexo Fluid 暗黑模式]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/hexo-dark-mode/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/hexo-dark-mode/</guid>
            <pubDate>Thu, 02 Apr 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>大概花了一个晚上搞暗黑模式，之后几天陆续优化了下
目前博客已经基本上适配完成了
目前是三种方案（优先级递减）</p>
<ol>
<li>媒体查询</li>
<li>定时开启</li>
<li>localStorage/sessionStorage 查询<!--more-->
<code>媒体查询</code>，判断系统是否处于暗黑模式，支持大部分系统
Win10 需要浏览器开启深色模式
Android 同理，需要浏览器支持手机开启夜间模式的时候将自身切换到神色模式，目前 Chrome 支持，Edge 不支持，其他没测
iOS、MacOS 上的 Safari 也支持</li>
</ol>
<p><code>定时开启</code>，在规定时间自动开启，如果在该时间段内取消了暗黑模式，能一直保持</p>
<p><code>localStorage/sessionStorage 查询</code>，能一直保持某一个模式的依赖</p>
<h3 id="html">HTML</h3>
<p>在 <code>\themes\fluid\layout\layout.ejs</code> 中找到 <code>&lt;body&gt;</code>，在其之后加入如下代码</p>
<pre><code class="language-html">&lt;div id=&quot;dark&quot; onclick=&quot;switchDarkMode()&quot;&gt;&lt;/div&gt;
&lt;script&gt;
  var isNight = new Date().getHours() &gt;= 22 || new Date().getHours() &lt; 7;
  if( matchMedia(&#39;(prefers-color-scheme: dark)&#39;).matches || isNight || localStorage.getItem(&#39;dark&#39;) === &#39;1&#39;) {
    if(!(isNight&amp;&amp;localStorage.getItem(&#39;noDark&#39;) === &#39;1&#39;)) {
      document.body.classList.add(&#39;dark&#39;);
    }
  }
  document.getElementById(&#39;dark&#39;).innerHTML = document.querySelector(&quot;body&quot;).classList.contains(&quot;dark&quot;)?&quot;🌙&quot;:&quot;🌞&quot;;
&lt;/script&gt;</code></pre>
<p>:::warning 注意
一定紧跟在 <code>body</code> 标签之后，否则会出现闪烁
:::</p>
<h3 id="js">JS</h3>
<p>然后随便找个 JS 把下面代码加进去，直接加到 <code>&lt;/body&gt;</code> 之前也行</p>
<pre><code class="language-js">//点击事件
function switchDarkMode() {
  if ($(&#39;body&#39;).hasClass(&#39;dark&#39;)) {
    $(&quot;#dark&quot;).html(&quot;🌞&quot;);
    document.body.classList.remove(&#39;dark&#39;);
    localStorage.setItem(&#39;noDark&#39;, &#39;1&#39;);
    localStorage.setItem(&#39;dark&#39;, &#39;0&#39;);
  } else {
    $(&quot;#dark&quot;).html(&quot;🌙&quot;);
    document.body.classList.add(&#39;dark&#39;);
    localStorage.setItem(&#39;dark&#39;, &#39;1&#39;);
    localStorage.setItem(&#39;noDark&#39;, &#39;0&#39;);
  }
}</code></pre>
<h3 id="css">CSS</h3>
<p>在自定义 CSS 中加入代码</p>
<p>:::tip
可以用 <code>stylus</code>，能少些写
但是引入时记得后缀还是 <code>.css</code> 不要变
:::</p>
<p>下面是我的样式代码，基本覆盖所有内容，根据自身情况修改</p>
<pre><code class="language-stylus">/* 切换按钮 */
#dark
  cursor pointer
  position fixed
  right 40px
  bottom 98px
  width 16px
  height 14px
  z-index 100
  font-size 20px

/*暗黑模式*/
.dark

  /* 主体 */
  #board
    background-color #282c34
    color #a09c9c

  img  
    filter brightness(50%)

  p
  .index-info a  
    color #a09c9c !important

  .markdown-body
    h1,h2,h3,h4,h5,h6,s,li  
      color:#a09c9c !important

  /* 顶栏 */
  .navbar-col-show
  .top-nav-collapse  
    background-color #282c34

  .navbar a
    color #a09c9c !important

  .animated-icon span   /* 手机端 */
    background-color #a09c9c


  /* page-number */
  .pagination a:hover
  .pagination .current  
    background-color #6b6b6b73;


  /* 打字机 */
  #subtitle
  .dark.typed-cursor--blink
  .scroll-down-arrow
    color #dfdfdf


  /* back to top */
  #scroll-top-button
    background-color #282c34

    i
      color #a09c9c


  /* Toc */
  .tocbot-list a
    color #a09c9c

  .tocbot-active-link
  footer a:hover
    color #1abc9c !important


  /* footer */
  footer
  footer a
    color #a09c9c


  /* 归档页 */
  .list-group-item
    color #a09c9c
    background-color #282c34

  .list-group-item:hover
  .tagcloud a:hover
    background-color #46484d


  /* 友链页 */
  .links
    .card  
      background-color #282c34

    .card-body:hover  
      background-color #46484d

    .link-title
    .link-intro  
      color #a09c9c


  /* note标签 可能这配色有点丑 */
  .note-info
    background-color #3b5359
    border-color #006d80

  .note-danger
    background-color #783f42
    border-color #670009

  .note-success
    background-color #2a3e2e
    border-color #005915

  .note-warning
    background-color #5b543e
    border-color #846500

  .note-primary
    background-color #455a6f
    border-color #004188</code></pre>
<h3 id="localstorage-还是-sessionstorage">localStorage 还是 sessionStorage</h3>
<p>仔细观察刚刚的 js 代码，在其中用的是 localStorage
除了 localStorage，你还可以用 sessionStorage
两者的区别也非常简单</p>
<blockquote>
<p>localStorage：除非被手动清除，否则将会永久保存。
sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</p>
</blockquote>
<p>举个简单例子，如果现在是白天（即没有触发夜间自动开启暗黑模式）
你手动点击切换成了暗黑模式，当你关闭当前网页再次进入时
如果你用的是 localStorage，那么此时就还是暗黑模式
而如果你用的是 sessionStorage，此时就不是暗黑模式了</p>
<p>两者的使用方法相同
直接替换就可以了</p>
<p>:::caution <a href="https://crosschannel.cc">track13</a> 指出
sessionStorage 在手机浏览器上问题很多，不推荐使用
:::</p>
<p>下面是支持该特性的最低版本
<img src="https://cos.royce2003.top/41212/01.webp-default" alt="支持情况"></p>
<p>可以在浏览器控制台中查看他们的值
<img src="https://cos.royce2003.top/41212/02.webp-default" alt="查看"></p>
<hr>
<h3 id="参考">参考</h3>
<ol>
<li><a href="https://crosschannel.cc/daily/hexo%E6%B7%BB%E5%8A%A0%E6%9A%97%E8%89%B2%E6%A8%A1%E5%BC%8F.html">面向小白的Hexo添加暗色模式教程 | 宅日记</a></li>
</ol>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Hexo Fluid 瞎折腾]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/hexo-fluid/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/hexo-fluid/</guid>
            <pubDate>Wed, 01 Apr 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>:::note 📄 更新日志
2020.04.10 新增超好看的复选框<br>2020.04.13 更新动态背景代码<br>2020.04.28 自定义返回顶部图片和球形标签云<br>:::</p>
<p>:::warning 🚨 注意
随着主题的更新，文中的代码可能失效或引起错误，请自行修改
:::</p>
<h3 id="前言">前言</h3>
<p>好像还没有看到大佬写关于 Fluid 折腾的文章，就开了这个坑
文章放了源码进来，所以挺长的，大部分是改 CSS，JS 很少
首先，按照 Fluid 配置文件中的方法，新建自定义 CSS 和 JS
对于自定义 css，建议新建 <code>custom.styl</code>，接下来的代码基本都是 styl 的，直接放入 css 文件中无法使用</p>
<p>如果你还不知道什么是 stylus，有兴趣的话可以看看这篇文章 <a href="https://juejin.im/post/5bbd7a7c6fb9a05cfd27f4c6">『前端干货篇』：你不知道的Stylus</a></p>
<p>:::tip
新建的是 <code>styl</code>，配置文件中也填 <code>.css</code>
:::</p>
<pre><code class="language-yaml">custom_js: /js/custom.js # 指定自定义 js 文件路径，路径是相对 source 目录，如 /js/custom.js
custom_css: /css/custom.css # 指定自定义 css 文件路径，路径是相对 source 目录，如 /css/custom.css
custom_html: &#39;&#39;  # 自定义底部 HTML 内容（位于 footer 上方），也可用于外部引入 js css 这些操作，注意不要和 post.custom 配置冲突</code></pre>
<h3 id="动态背景">动态背景</h3>
<p>[^1]</p>
<p>效果见 <a href="https://a9m5yn.coding-pages.com/">演示站点</a></p>
<p>自定义 CSS 中加入如下代码</p>
<pre><code class="language-stylus">.slideshow
  position fixed
  width 100vw
  height 100vh

  .slideshow-image
    position: fixed
    background-size cover
    width 100%
    height 100%
    background repeat 50% 50%
    animation-name kenburns
    animation-timing-function linear
    animation-iteration-count infinite
    animation-duration 24s
    opacity 1
    transform scale(1.2)
    filter brightness(70%) //背景遮罩，100% 正常，0% 完全黑色

    &amp;:nth-child(1){-webkit-animation-name: kenburns-1; animation-name: kenburns-1; z-index: -2;}
    &amp;:nth-child(2){-webkit-animation-name: kenburns-2; animation-name: kenburns-2; z-index: -3;}
    &amp;:nth-child(3){-webkit-animation-name: kenburns-3; animation-name: kenburns-3; z-index: -4;}
    &amp;:nth-child(4){-webkit-animation-name: kenburns-4; animation-name: kenburns-4; z-index: -5;}

@keyframes kenburns-1{0%{opacity: 1; -webkit-transform: scale(1.2); transform: scale(1.2);} 1.5625%{opacity: 1;} 23.4375%{opacity: 1;} 26.5625%{opacity: 0; -webkit-transform: scale(1); transform: scale(1);} 100%{opacity: 0; -webkit-transform: scale(1.2); transform: scale(1.2);} 98.4375%{opacity: 0; -webkit-transform: scale(1.21176); transform: scale(1.21176);} 100%{opacity: 1;}}
@keyframes kenburns-2{23.4375%{opacity: 1; -webkit-transform: scale(1.2); transform: scale(1.2);} 26.5625%{opacity: 1;} 48.4375%{opacity: 1;} 51.5625%{opacity: 0; -webkit-transform: scale(1); transform: scale(1);} 100%{opacity: 0; -webkit-transform: scale(1.2); transform: scale(1.2);}}
@keyframes kenburns-3{48.4375%{opacity: 1; -webkit-transform: scale(1.2); transform: scale(1.2);} 51.5625%{opacity: 1;} 73.4375%{opacity: 1;} 76.5625%{opacity: 0; -webkit-transform: scale(1); transform: scale(1);} 100%{opacity: 0; -webkit-transform: scale(1.2); transform: scale(1.2);}}
@keyframes kenburns-4{73.4375%{opacity: 1; -webkit-transform: scale(1.2); transform: scale(1.2);} 76.5625%{opacity: 1;} 98.4375%{opacity: 1;} 100%{opacity: 0; -webkit-transform: scale(1); transform: scale(1);}}</code></pre>
<p>接着在 <code>themes\fluid\layout\layout.ejs</code> 中 <code>&lt;body&gt;</code> 后加入如下代码
<code>background-image: url</code> 中填入图片链接</p>
<pre><code class="language-html">&lt;div class=&quot;slideshow&quot;&gt;
    &lt;div class=&quot;slideshow-image&quot; style=&quot;background-image: url(&#39;1&#39;)&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;slideshow-image&quot; style=&quot;background-image: url(&#39;2&#39;)&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;slideshow-image&quot; style=&quot;background-image: url(&#39;3&#39;)&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;slideshow-image&quot; style=&quot;background-image: url(&#39;4&#39;)&quot;&gt;&lt;/div&gt;
&lt;/div&gt;</code></pre>
<p>然后取消原本头图的获取
用最简单的方法，直接删去获取头图的代码，保留标签</p>
<pre><code class="language-diff">  &lt;header style=&quot;height: &lt;%- banner_img_height %&gt;vh;&quot;&gt;
    &lt;%- partial(&#39;_partial/nav&#39;) %&gt;
-    &lt;div class=&quot;view intro-2&quot; id=&quot;background&quot; &lt;%- theme.banner_parallax &amp;&amp; &#39;parallax=true&#39; %&gt;
-      style=&quot;background: url(&#39;&lt;%- url_for(banner_img) %&gt;&#39;) no-repeat center center;
-        background-size: cover;&quot;&gt;
+    &lt;div class=&quot;view intro-2&quot; id=&quot;background&quot;&gt;
      &lt;div class=&quot;full-bg-img&quot;&gt;
        &lt;div class=&quot;mask flex-center&quot;&gt;</code></pre>
<p>将主题配置中<strong>所有</strong>头图的黑色蒙版设为 0</p>
<pre><code class="language-yaml">banner_mask_alpha: 0  # 头图黑色蒙版的透明度，available: 0 - 1.0， 0 是完全透明（无蒙版），1 是完全不透明</code></pre>
<p>如果出现背景跟随滚动，请在配置文件中关闭头图滚动视差</p>
<pre><code class="language-yaml">banner_parallax: false # 头图滚动视差</code></pre>
<p>因为是依赖 <code>z-index</code> 实现的切换，建议图片大小递增排序，避免第一张图还没加载出来，第二张图先出现的情况</p>
<h3 id="侧边滚动条">侧边滚动条</h3>
<pre><code class="language-css">::-webkit-scrollbar-button
  display none

::-webkit-scrollbar
  width 10px
  height 10px
  background-color: #2f415452

::-webkit-scrollbar-thumb
  border-radius 5px
  background-color #2f4154
  background-image -webkit-linear-gradient(45deg,rgba(255,255,255,.2) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.2) 50%,rgba(255,255,255,.2) 75%,transparent 75%,transparent)

  &amp;:hover
    background-color #2f4154b8;</code></pre>
<p>:::tip
会同时对所有滚动条生效
:::</p>
<h3 id="返回顶部按钮">返回顶部按钮</h3>
<p>增加动画</p>
<pre><code class="language-css">#scroll-top-button
  border-radius 25px
  -webkit-transition all .6s
  -moz-transition all .6s
  -o-transition all .6s
  transition all .6s

  &amp;:hover
    transform scale(1.2)
    border-radius 20%</code></pre>
<h3 id="标题前-emoji">标题前 Emoji</h3>
<p>[^2]</p>
<pre><code class="language-stylus">/* 想在手机端也显示，去除最外层的 @media，并更改缩进 */
@media (min-width:768px)
  .post-content
    h1::before
      content: &quot;🌈&quot;;
      visibility: visible;
      display: inline;
    h2::before
      content: &quot;🚀&quot;;
      visibility: visible;
      display: inline;
    h3::before
      content: &quot;🔍&quot;;
      visibility: visible;
      display: inline;</code></pre>
<h3 id="首页图片动画">首页图片动画</h3>
<p>鼠标触碰放大</p>
<pre><code class="language-css">.index-img
  transition: .4s;

.index-card:hover .index-img
  transform: scale(1.1);
  box-shadow: 0 5px 11px 0 rgba(0,0,0,0.38), 0 4px 15px 0 rgba(0,0,0,0.35);</code></pre>
<h3 id="底部及-toc-样式更改">底部及 TOC 样式更改</h3>
<p>因为之前的动态背景添加了遮罩导致底部链接等看不起</p>
<pre><code class="language-stylus">.tocbot-list a
#toc, footer, footer a
  color #ffffff

footer a:hover
.tocbot-active-link
  color #1abc9c !important</code></pre>
<h3 id="标题文字特效">标题文字特效</h3>
<p><img src="https://cos.royce2003.top/60394/01.webp-default" alt="演示"></p>
<p>文字触碰动画（源网，找不到原站链接了）</p>
<pre><code class="language-stylus">/* 注意避免类名相同造成样式冲突 */
.link {
  outline: none;
  text-decoration: none;
  position: relative;
  font-size: 2em;
  color: #9e9ba4;
  display: inline-block;
}
.link--kukuri {
  text-transform: uppercase;
  font-weight: 700;
  overflow: hidden;
  color: #2f4144;
}

.link--kukuri:hover {
  color: #2f4144;
}

.link--kukuri::after {
  content: &#39;&#39;;
  position: absolute;
  height: 10px;
  width: 100%;
  top: 42%;
  margin: auto;
  right: 0;
  background: #F9F9F9;
  -webkit-transform: translate3d(-100%,0,0);
  transform: translate3d(-100%,0,0);
  -webkit-transition: -webkit-transform 0.4s;
  transition: transform 0.4s;
  -webkit-transition-timing-function: cubic-bezier(0.7,0,0.3,1);
  transition-timing-function: cubic-bezier(0.7,0,0.3,1);
}

.link--kukuri:hover::after {
  -webkit-transform: translate3d(100%,0,0);
  transform: translate3d(100%,0,0);
}

.link--kukuri::before {
  border:0px solid;
  content: attr(data-letters);
  position: absolute;
  z-index: 2;
  overflow: hidden;
  color: #ff779a;
  white-space: nowrap;
  width: 0%;
  -webkit-transition: width 0.4s 0.3s;
  transition: width 0.4s 0.3s;
}

.link--kukuri:hover::before {
  width: 100%;
}</code></pre>
<p>然后在你想显示的地方插入如下 HTML</p>
<p>:::tip
data-letters 中需要和内容保持一致<br>不用 a 标签也可以，保证类名正确
:::</p>
<pre><code class="language-html">&lt;a class=&quot;link link--kukuri&quot; href=&quot;test.test&quot; data-letters=&quot;test&quot;&gt;test&lt;/a&gt;</code></pre>
<h3 id="留言板">留言板</h3>
<p>在 <code>themes\hexo-theme-fluid-master\layout\</code> 中新建 <code>messageboard.ejs</code> 文件
先写上头图之类的设定</p>
<pre><code class="language-html">&lt;%
page.layout = &quot;messageboard&quot;
page.title = theme.messageboard.title || __(&#39;messageboard.title&#39;)
page.subtitle = theme.messageboard.subtitle || __(&#39;messageboard.subtitle&#39;)
page.banner_img = theme.messageboard.banner_img
page.banner_img_height = theme.messageboard.banner_img_height
%&gt;</code></pre>
<p>然后在配置文件中加入相应内容，当然，你也可以直接在上面的代码中指定</p>
<pre><code class="language-yaml">#---------------------------
# 留言板页
# Messageboard Page
#---------------------------
messageboard:
  banner_img:         # 头图
  banner_img_height:  # available: 0 - 100
  subtitle:           # 打字机内容</code></pre>
<p>语言文件中也是一样的，这里就不写了</p>
<h4 id="引入评论">引入评论</h4>
<p>刚刚创建的 ejs 文件中</p>
<pre><code class="language-html">&lt;!-- Comments --&gt;
&lt;div class=&quot;container comments mx-auto&quot; id=&quot;comments&quot;&gt;
    &lt;% if(theme.post.comments.enable) { %&gt;
    &lt;br&gt;&lt;br&gt;
    &lt;% var type = &#39;_partial/comments/&#39; + theme.post.comments.type %&gt;
    &lt;%- partial(type) %&gt;
    &lt;% } %&gt;
&lt;/div&gt;</code></pre>
<p>自定义内容写在评论代码之前就好了，支持 HTML</p>
<p>然后两种方法开启，二选一即可</p>
<h4 id="1">1</h4>
<p>在根目录的 <code>source</code> 文件夹中创建 <code>messageboard.md</code>
并在 <code>front-matter</code> 中加上 <code>layout: messageboard</code>
和 about 界面的方法一样</p>
<h4 id="2">2</h4>
<p>在 <code>themes\fluid\scripts\pages.js</code> 文件中加入如下代码</p>
<pre><code class="language-js">// generate messageboard page
hexo.extend.generator.register(&#39;_messageboard&#39;, function (locals) {
  return {
    path: &#39;messageboard/index.html&#39;,
    data: locals.theme,
    layout: &#39;messageboard&#39;,
  };
});</code></pre>
<h3 id="更好看的音乐播放器">更好看的音乐播放器</h3>
<p>[^3]</p>
<p>本身的 aplayer 个人觉得并不是很好看，而且是全局的
换了给好看点的播放器，在指定页面加载
需要加载的页面加入</p>
<p><img src="https://cos.royce2003.top/60394/02.webp-default" alt="音乐播放器"></p>
<h4 id="js">JS</h4>
<p>自定义 js 里加入</p>
<pre><code class="language-js">(function() {
    var dr = $(&quot;#dowebok&quot;);
    if(!dr.length &gt; 0) return;
    dr.append(&quot;&lt;div id=\&quot;player\&quot;&gt;&lt;div id=\&quot;player-track\&quot;&gt;&lt;div id=\&quot;album-name\&quot;&gt;&lt;/div&gt;&lt;div id=\&quot;track-name\&quot;&gt;&lt;/div&gt;&lt;div id=\&quot;track-time\&quot;&gt;&lt;div id=\&quot;current-time\&quot;&gt;&lt;/div&gt;&lt;div id=\&quot;track-length\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id=\&quot;s-area\&quot;&gt;&lt;div id=\&quot;ins-time\&quot;&gt;&lt;/div&gt;&lt;div id=\&quot;s-hover\&quot;&gt;&lt;/div&gt;&lt;div id=\&quot;seek-bar\&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div id=\&quot;player-content\&quot;&gt;&lt;div id=\&quot;album-art\&quot;&gt;&lt;img src=\&quot;images/1.jpg\&quot; class=\&quot;active\&quot; id=\&quot;album-pic\&quot;&gt;&lt;div id=\&quot;buffer-box\&quot;&gt;加载中...&lt;/div&gt;&lt;/div&gt;&lt;div id=\&quot;player-controls\&quot;&gt;&lt;div class=\&quot;control\&quot;&gt;&lt;div class=\&quot;player-button\&quot; id=\&quot;play-previous\&quot;&gt;&lt;i class=\&quot;fas fa-backward\&quot;&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;control\&quot;&gt;&lt;div class=\&quot;player-button\&quot; id=\&quot;play-pause-button\&quot;&gt;&lt;i class=\&quot;fas fa-play\&quot;&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\&quot;control\&quot;&gt;&lt;div class=\&quot;player-button\&quot; id=\&quot;play-next\&quot;&gt;&lt;i class=\&quot;fas fa-forward\&quot;&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&quot;);
    var playerTrack = $(&quot;#player-track&quot;),
        albumName = $(&#39;#album-name&#39;),
        trackName = $(&#39;#track-name&#39;),
        albumArt = $(&#39;#album-art&#39;),
        sArea = $(&#39;#s-area&#39;),
        seekBar = $(&#39;#seek-bar&#39;),
        trackTime = $(&#39;#track-time&#39;),
        insTime = $(&#39;#ins-time&#39;),
        sHover = $(&#39;#s-hover&#39;),
        playPauseButton = $(&quot;#play-pause-button&quot;),
        i = playPauseButton.find(&#39;i&#39;),
        tProgress = $(&#39;#current-time&#39;),
        tTime = $(&#39;#track-length&#39;),
        seekT, seekLoc, seekBarPos, cM, ctMinutes, ctSeconds, curMinutes, curSeconds, durMinutes, durSeconds, playProgress, bTime, nTime = 0,
        buffInterval = null,
        tFlag = false,
        playPreviousTrackButton = $(&#39;#play-previous&#39;),
        playNextTrackButton = $(&#39;#play-next&#39;);
    function playPause() {
        setTimeout(function () {
            if (audio.paused) {
                playerTrack.addClass(&#39;active&#39;);
                albumArt.addClass(&#39;active&#39;);
                checkBuffering();
                i.attr(&#39;class&#39;, &#39;fas fa-pause&#39;);
                audio.play();
            } else {
                playerTrack.removeClass(&#39;active&#39;);
                albumArt.removeClass(&#39;active&#39;);
                clearInterval(buffInterval);
                albumArt.removeClass(&#39;buffering&#39;);
                i.attr(&#39;class&#39;, &#39;fas fa-play&#39;);
                audio.pause();
            }
        }, 300);
    }
    function showHover(event) {
        seekBarPos = sArea.offset();
        seekT = event.clientX - seekBarPos.left;
        seekLoc = audio.duration * (seekT / sArea.outerWidth());
        sHover.width(seekT);
        cM = seekLoc / 60;
        ctMinutes = Math.floor(cM);
        ctSeconds = Math.floor(seekLoc - ctMinutes * 60);
        if ((ctMinutes &lt; 0) || (ctSeconds &lt; 0)) return;
        if (ctMinutes &lt; 10) ctMinutes = &#39;0&#39; + ctMinutes;
        if (ctSeconds &lt; 10) ctSeconds = &#39;0&#39; + ctSeconds;
        if (isNaN(ctMinutes) || isNaN(ctSeconds)) insTime.text(&#39;--:--&#39;);
        else insTime.text(ctMinutes + &#39;:&#39; + ctSeconds);
        insTime.css({
            &#39;left&#39;: seekT,
            &#39;margin-left&#39;: &#39;-21px&#39;
        }).fadeIn(0);
    }
    function hideHover() {
        sHover.width(0);
        insTime.text(&#39;00:00&#39;).css({
            &#39;left&#39;: &#39;0px&#39;,
            &#39;margin-left&#39;: &#39;0px&#39;
        }).fadeOut(0);
    }
    function playFromClickedPos() {
        audio.currentTime = seekLoc;
        seekBar.width(seekT);
        hideHover();
    }
    function updateCurrTime() {
        nTime = new Date();
        nTime = nTime.getTime();
        if (!tFlag) {
            tFlag = true;
            trackTime.addClass(&#39;active&#39;);
        }
        curMinutes = Math.floor(audio.currentTime / 60);
        curSeconds = Math.floor(audio.currentTime - curMinutes * 60);
        durMinutes = Math.floor(audio.duration / 60);
        durSeconds = Math.floor(audio.duration - durMinutes * 60);
        playProgress = (audio.currentTime / audio.duration) * 100;
        if (curMinutes &lt; 10) curMinutes = &#39;0&#39; + curMinutes;
        if (curSeconds &lt; 10) curSeconds = &#39;0&#39; + curSeconds;
        if (durMinutes &lt; 10) durMinutes = &#39;0&#39; + durMinutes;
        if (durSeconds &lt; 10) durSeconds = &#39;0&#39; + durSeconds;
        if (isNaN(curMinutes) || isNaN(curSeconds)) tProgress.text(&#39;00:00&#39;);
        else tProgress.text(curMinutes + &#39;:&#39; + curSeconds);
        if (isNaN(durMinutes) || isNaN(durSeconds)) tTime.text(&#39;00:00&#39;);
        else tTime.text(durMinutes + &#39;:&#39; + durSeconds);
        if (isNaN(curMinutes) || isNaN(curSeconds) || isNaN(durMinutes) || isNaN(durSeconds)) trackTime.removeClass(&#39;active&#39;);
        else trackTime.addClass(&#39;active&#39;);
        seekBar.width(playProgress + &#39;%&#39;);
        if (playProgress == 100) {
            i.attr(&#39;class&#39;, &#39;fa fa-play&#39;);
            seekBar.width(0);
            tProgress.text(&#39;00:00&#39;);
            albumArt.removeClass(&#39;buffering&#39;).removeClass(&#39;active&#39;);
            clearInterval(buffInterval);
        }
    }
    function checkBuffering() {
        clearInterval(buffInterval);
        buffInterval = setInterval(function () {
            if ((nTime == 0) || (bTime - nTime) &gt; 1000) albumArt.addClass(&#39;buffering&#39;);
            else albumArt.removeClass(&#39;buffering&#39;);
            bTime = new Date();
            bTime = bTime.getTime();
        }, 100);
    }
    function selectTrack2(flag) {
        //歌单api调用 https://api.uomg.com/doc-rand.music.html
        $.getJSON(&#39;https://api.uomg.com/api/rand.music?&#39;, {
            sort: &quot;热歌榜&quot;, //选择输出分类[热歌榜|新歌榜|飙升榜|抖音榜|电音榜]，为空输出热歌榜
            // mid: 12345,    歌单 id
            // sort mid 二选一
            format: &#39;json&#39;
        }, function(json, textStatus) {
            if (json.code == 1) {
                if (flag == 0) i.attr(&#39;class&#39;, &#39;fa fa-play&#39;);
                else {
                    albumArt.removeClass(&#39;buffering&#39;);
                    i.attr(&#39;class&#39;, &#39;fa fa-pause&#39;);
                }
                seekBar.width(0);
                trackTime.removeClass(&#39;active&#39;);
                tProgress.text(&#39;00:00&#39;);
                tTime.text(&#39;00:00&#39;);
                currAlbum = json.data.artistsname;
                currTrackName = json.data.name;
                currArtwork = json.data.picurl;
                audio.src = json.data.url;
                nTime = 0;
                bTime = new Date();
                bTime = bTime.getTime();
                if (flag != 0) {
                    audio.play();
                    playerTrack.addClass(&#39;active&#39;);
                    albumArt.addClass(&#39;active&#39;);
                    clearInterval(buffInterval);
                    checkBuffering();
                }
                albumName.text(currAlbum);
                trackName.text(currTrackName);
                albumArt.find(&#39;img.active&#39;).removeClass(&#39;active&#39;);
                $(&#39;#album-pic&#39;).addClass(&#39;active&#39;);
                $(&#39;#album-pic&#39;).attr(&#39;src&#39;,currArtwork);
            }
        });
    }
    function initPlayer() {
        audio = new Audio();
        selectTrack2(1); //非0自动播放
        audio.loop = false;
        playPauseButton.on(&#39;click&#39;, playPause);
        sArea.mousemove(function (event) {
            showHover(event);
        });
        sArea.mouseout(hideHover);
        sArea.on(&#39;click&#39;, playFromClickedPos);
        $(audio).on(&#39;timeupdate&#39;, updateCurrTime);
        playPreviousTrackButton.on(&#39;click&#39;, function () {
            selectTrack2(-1);
        });
        playNextTrackButton.on(&#39;click&#39;, function () {
            selectTrack2(1);
        });
    }
    initPlayer();
})();</code></pre>
<h4 id="css">CSS</h4>
<p>自定义 CSS 中加入</p>
<pre><code class="language-stylus">#dowebok
  right 0
  left 0
  width 430px
  height 100px
  margin 100px auto 100px

#player
  position relative
  height 100%
  z-index 3

#player-track
  position absolute
  top 0
  right 15px
  left 15px
  padding 13px 22px 10px 184px
  background-color #fff7f7
  border-radius 15px 15px 0 0
  transition 0.3s ease top
  z-index 1

  &amp;.active
    top -80px

#album-name
  color #54576f
  font-size 17px
  font-weight bold

#track-name
  color #acaebd
  font-size 11px
  white-space: nowrap;
  width: 100%;
  overflow: hidden;
  text-overflow:ellipsis;

#track-time
  height 12px
  margin-bottom 3px

  &amp;.active
    #current-time, #track-length
      color #f86d92;
      background-color transparent

#current-time
  float left

#track-length
  float right

#current-time,
#track-length
  color transparent
  font-size 11px
  background-color #ffe8ee
  border-radius 10px
  transition 0.3s ease all


#s-area,
#seek-bar
  position relative
  height 4px
  border-radius 4px

#s-area
  background-color #ffe8ee
  cursor pointer

#ins-time
  position absolute
  top -29px
  color #fff
  font-size 12px
  white-space pre
  padding 5px 6px
  border-radius 4px
  display none;
  background-color #3b3d50

#s-hover
  position absolute
  top 0
  bottom 0
  left 0
  opacity 0.2
  z-index 2
  background-color #3b3d50


#seek-bar
  content &#39;&#39;
  position absolute
  top 0
  bottom 0
  left 0
  width 0
  background-color #fd6d94
  transition 0.2s ease width
  z-index 1

#player-content
  position relative
  height 100%
  background-color #fff
  box-shadow 0 30px 80px #656565
  border-radius 15px
  z-index 2

#album-art
  position absolute
  top -40px
  width 115px
  height 115px
  margin-left 40px
  -webkit-transform rotateZ(0)
  transform rotateZ(0)
  transition 0.3s ease all
  box-shadow 0 0 0 10px #fff
  border-radius 50%
  overflow hidden

  .buffering
    #buffer-box
      opacity 1

    img
      opacity 0.25

      .active
        opacity 0.8
        filter blur(2px)
        -webkit-filter blur(2px)

  img
    display block;
    position absolute;
    top 0;
    left 0;
    width 100%;
    height 100%;
    opacity 0;
    z-index -1;
    transition 0.1s linear all

    &amp;.active
      opacity 1;
      z-index 1;

  &amp;.active
    top -60px
    box-shadow 0 0 0 4px #fff7f7, 0 30px 50px -15px #afb7c1

    img.active
      z-index 1;
      -webkit-animation rotateAlbumArt 3s linear 0s infinite forwards;
      animation rotateAlbumArt 3s linear 0s infinite forwards;

  &amp;::before
    content &#39;&#39;
    position absolute
    top 50%
    right 0
    left 0
    width 20px
    height 20px
    margin -10px auto 0 auto
    background-color #d6dee7
    border-radius 50%
    box-shadow inset 0 0 0 2px #fff
    z-index 2

@-webkit-keyframes rotateAlbumArt
  0%
    -webkit-transform: rotateZ(0)
    transform: rotateZ(0)
  100%
    -webkit-transform: rotateZ(360deg)
    transform: rotateZ(360deg)
@keyframes rotateAlbumArt
  0%
    -webkit-transform: rotateZ(0)
    transform: rotateZ(0)
  100%
    -webkit-transform: rotateZ(360deg)
    transform: rotateZ(360deg)

#buffer-box
  position absolute
  top 50%
  right 0
  left 0
  height 13px
  color #1f1f1f
  font-size 13px
  font-family Helvetica
  text-align center
  font-weight bold
  line-height 1
  padding 6px
  margin -12px auto 0 auto
  background-color rgba(255, 255, 255, 0.19)
  opacity 0
  z-index 2
  transition 0.1s linear all

#player-controls
  width 250px
  height 100%
  margin 0 5px 0 141px
  float right
  overflow hidden

.control
  width 33.333%
  float left
  padding 12px 0

.player-button
  padding 25px
  background-color #fff
  border-radius 6px
  cursor pointer
  transition 0.2s ease all

  i
    display block
    color #d6dee7
    font-size 26px
    text-align center
    line-height 1
    transition 0.2s ease all

  &amp;:hover
    background-color #d6d6de

    i
      color #fff

@media (max-width:768px)
  #dowebok
    width 95%
    height 20vw

  #player-controls
    width 175px

  .player-button
    padding: 20px

    i
      font-size: 20px

    &amp;:hover
      background-color #0000

      i
        color #d6dee7

  #album-art
    width 30%
    height 0
    padding-bottom: 30%

  #album-name
    font-size 15px

  #track-name
    font-size 10px</code></pre>
<p>上方的 css 可在 JS 中引进去，或者在需要的界面加进去
不建议加到全局，毕竟不是所有界面都需要（其实影响也不是很大）</p>
<h4 id="html">HTML</h4>
<p>需要加载的页面（md 或者 ejs）中加入</p>
<pre><code class="language-html">&lt;div id=&quot;dowebok&quot;&gt;&lt;/div&gt;</code></pre>
<p>可能会出现遮挡问题，自己通过 <code>&lt;br&gt;</code> 调整就好了</p>
<p>js 和 css，源自<a href="https://www.yanghuaxing.com/blog/547.html">链接</a>
稍作修改，手机端适配我可能没怎么写好 <del>(就那么几行能适配完美才怪)</del>
暗黑模式也没适配这个
音乐来源见 js 代码块的 114、115 行，可选自己的网易歌单或者热歌榜等排行榜</p>
<p>直接把源码部署到一个地方拿来代替用也非常不错，毕竟很好看，再用 Edge 安装在电脑上，嘻嘻嘻</p>
<h3 id="可交互复选框">可交互复选框</h3>
<p>[^4]</p>
<p>已 PR 至主题，可前往主题更新并通过 Tag 标签使用
但主题只内置了方形选框，下方新增</p>
<div><input type="radio" disabled="" checked=""><p>圆形选框</p></div>
<div><input type="checkbox" disabled="" checked=""><p>方形选框</p></div>
<div><input type="checkbox" class="red" disabled="" checked=""><p>可选颜色</p></div>

<p>下方只介绍 HTML 用法
自定义 CSS 中添加以下代码</p>
<pre><code class="language-css">input
  -webkit-appearance: none;
  -moz-appearance: none;
  -ms-appearance: none;
  -o-appearance: none;
  appearance: none;
  position: relative;
  right: 0;
  bottom: 0;
  left: 0;
  height: 20px;
  width: 20px;
  transition:all .15s ease-out 0s;
  color: #fff;
  cursor: pointer;
  display: inline-block;
  margin: .4rem .2rem .4rem !important;
  outline: none;
  border-radius: 10%;


/* Checkbox */
input[type=checkbox]
  vertical-align: -0.65rem;

  &amp;:before, &amp;:after
    position: absolute;
    content: &quot;&quot;;
    background: #fff;
    transition: all .2s ease-in-out;

  &amp;:before
    left: 2px;
    top: 6px;
    width: 0;
    height: 2px;
    transform: rotate(45deg);
    -webkit-transform: rotate(45deg);
    -moz-transform: rotate(45deg);
    -ms-transform: rotate(45deg);
    -o-transform: rotate(45deg);

  &amp;:after
    right: 9px;
    bottom: 3px;
    width: 2px;
    height: 0;
    transform: rotate(40deg);
    -webkit-transform: rotate(40deg);
    -moz-transform: rotate(40deg);
    -ms-transform: rotate(40deg);
    -o-transform: rotate(40deg);
    transition-delay: .2s;

  &amp;:checked
    &amp;:before
      left: 1px;
      top: 10px;
      width: 6px;
      height: 2px;

    &amp;:after
      right: 5px;
      bottom: 1px;
      width: 2px;
      height: 14px;

/* radio */
input[type=radio]
  vertical-align: -0.7rem;
  border-radius: 50%;

  &amp;:before
    content: &quot;&quot;;
    display: block;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    margin: .2rem;
    transform: scale(0);
    transition: all ease-out 250ms;

  &amp;:checked:before
    transform: scale(1);

/* Colors */
input[type=checkbox]
  border: 2px solid #4caf50;

  &amp;:checked, &amp;:indeterminate
    background: #4caf50;

input[type=radio]
  border: 2px solid #4caf50;

  &amp;:checked:before
    background: #4caf50;

input[type=checkbox].blue
  border: 2px solid #2196f3;

  &amp;:checked, &amp;:indeterminate
    background: #2196f3;

input[type=radio].blue
  border: 2px solid #2196f3;

  &amp;:checked:before
    background: #2196f3;

input[type=checkbox].red
  border: 2px solid #f44336;

  &amp;:checked, &amp;:indeterminate
    background: #f44336;

input[type=radio].red
  border: 2px solid #f44336;

  &amp;:checked:before
    background: #f44336;

input[type=checkbox].orange
  border: 2px solid #ffc107;

  &amp;:checked, &amp;:indeterminate
    background: #ffc107;

input[type=radio].orange
  border: 2px solid #ffc107;

  &amp;:checked:before
    background: #ffc107;</code></pre>
<p>用法</p>
<pre><code class="language-html">&lt;input type=&quot;checkbox&quot;&gt;
&lt;input type=&quot;radio&quot;&gt;</code></pre>
<div><input type="checkbox" class="green" disabled=""><p>左边是 <code>type=checkbox</code></p></div>
<div><input type="radio" disabled=""><p>左边是 <code>type=radio</code></p></div>

<p>默认绿色，设置颜色，只需要加上 class 就行。
目前 class 有 <code>blue</code> <code>red</code> <code>orange</code>，可自行更改 CSS</p>
<p>默认是方形没有打勾，圆形没有选中
加上 chencked 就会默认选中
如下方代码</p>
<pre><code class="language-html">&lt;input type=&quot;radio&quot; chencked&gt;</code></pre>
<div><input type="checkbox" class="blue" disabled="" checked=""><p>左边是选中的</p></div>
<div><input class="red" type="radio" checked="" disabled=""><p>左边是选中的</p></div>

<h3 id="球形标签云">球形标签云</h3>
<p>[^5]</p>
<p><code>hexo-tag-cloud</code> 插件是 MikeCoder 写的一个 Hexo 博客的标签云插件</p>
<p><img src="https://cos.royce2003.top/db44ecae/03.webp-default" alt="GIF.gif"></p>
<h4 id="安装插件">安装插件</h4>
<pre><code class="language-bash">npm install hexo-tag-cloud@^2.1.* --save</code></pre>
<p>在 <code>fluid\layout\tags.ejs</code> 中加入如下代码</p>
<pre><code class="language-html">&lt;% if (site.tags.length) { %&gt;
  &lt;div class=&quot;text-center&quot;&gt;
    &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;&lt;%- url_for(&#39;/js/tagcloud.js&#39;) %&gt;&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;&lt;%- url_for(&#39;/js/tagcanvas.js&#39;) %&gt;&quot;&gt;&lt;/script&gt;
    &lt;div class=&quot;widget-wrap&quot;&gt;
      &lt;div id=&quot;myCanvasContainer&quot; class=&quot;widget tagcloud&quot;&gt;
        &lt;canvas width=&quot;250&quot; height=&quot;250&quot; id=&quot;resCanvas&quot; style=&quot;width=100%&quot;&gt;
          &lt;%- tagcloud() %&gt;
        &lt;/canvas&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;% } %&gt;</code></pre>
<h4 id="开启">开启</h4>
<p>根目录配置文件添加如下的配置</p>
<pre><code class="language-yaml"># hexo-tag-cloud
tag_cloud:
    textFont: Trebuchet MS, Helvetica
    textColor: &#39;#333&#39;
    textHeight: 25
    outlineColor: &#39;#E2E1D1&#39;
    maxSpeed: 0.5</code></pre>
<p><code>textColor</code>: 字体颜色
<code>textHeight</code>: 字体高度
<code>maxSpeed</code>: 文字滚动速度</p>
<h3 id="代码块仿-mac">代码块仿 Mac</h3>
<p>源网</p>
<pre><code class="language-stylus">.markdown-body
  pre
    padding-bottom 5px

    code
      padding 1rem 0 .5rem 0

      &amp;::before
        content &#39; &#39;
        position absolute
        background #fc625d
        border-radius 50%
        box-shadow 20px 0 #fdbc40, 40px 0 #35cd4b
        margin-top -20px
        left 12px
        height 12px
        width 12px</code></pre>
<hr>
<h3 id="最后">最后</h3>
<p>应该没啥可折腾的了，还有的话也不新开文章了，就这里持续更新吧，会置顶并将最近一次更新写在摘要中
暗黑模式下篇文章再写吧 <del>(水文章数量)</del></p>
<p>作者已经把主题做的非常完美了，有什么问题都会立马修复，功能也出的很快，超 nice</p>
<p>博客刚搭建的时候用了一个 material 主题，觉得过于平淡，换到了一个 gal 主题，功能很多
慢慢的又看厌了，很多人推荐 Next，就又换到了 Next，的确很好用
就光针对 Next 的教程数量而言，应该能算是大部分用 Hexo 的人都用过的
经常逛博客也发现很多都是用的这个主题，用了几个月，改了很多东西，但也慢慢看厌了</p>
<p>就开始再次踏上寻找主题的路，经常看到一个好看的主题，但又想到自己在 Next 上大量的自定义内容，一直不忍心丢下
看到 Fluid 之后超喜欢，先用 Fluid 搭建了副站，放在 Gitee 上，慢慢完善
完善到一定程度，有人和我说副站更好看，我看了看好像真是这么回事...
才下定决心开始换主题，前前后后花了一个多星期全部完成</p>
<p>Fluid 应该是会一直用下去了
不过仍有继续折腾的打算
可能会再用 Typecho 搭建一个玩玩...</p>
<p>[^1]: 参考: <a href="https://www.51qianduan.com/article/3115.html">纯css3全屏图片背景缩小渐变式切换特效</a>
[^2]: 参考: <a href="https://bestzuo.cn/posts/blog-establish.html">Hexo博客+Next主题深度优化与定制</a>
[^3]: 参考: <a href="https://www.yanghuaxing.com/blog/547.html">网易云HTML5音乐随机播放器</a>
[^4]: 参考: <a href="http://www.htmleaf.com/css3/css3donghua/201806235190.html">带点击动画特效的CSS3单选框和复选框</a>
[^5]: 参考: <a href="https://github.com/MikeCoder/hexo-tag-cloud">MikeCoder/hexo-tag-cloud</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[P3368 【模板】树状数组 2]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/fenwick-tree-2/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/fenwick-tree-2/</guid>
            <pubDate>Thu, 26 Mar 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h3 id="题目">题目</h3>
<p>[^1]</p>
<h4 id="题目描述">题目描述</h4>
<p>如题，已知一个数列，你需要进行下面两种操作：</p>
<ol>
<li>将某区间每一个数数加上 $x$；</li>
<li>求出某一个数的值。<!--more-->
<h4 id="输入格式">输入格式</h4>
</li>
</ol>
<p>第一行包含两个整数 $N$、$M$，分别表示该数列数字的个数和操作的总个数。</p>
<p>第二行包含 $N$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p>
<p>接下来 $M$行每行包含 2 或 4 个整数，表示一个操作，具体如下：</p>
<p>操作 1： 格式：<code>1 x y k</code> 含义：将区间 $x,y$ 内每个数加上 $k$；</p>
<p>操作 2： 格式：<code>2 x</code> 含义：输出第 $x$ 个数的值。</p>
<h4 id="输出格式">输出格式</h4>
<p>输出包含若干行整数，即为所有操作 2 的结果。</p>
<h4 id="输入输出样例">输入输出样例</h4>
<p><strong>输入 #1</strong></p>
<pre><code class="language-text">5 5
1 5 4 2 3
1 2 4 2
2 3
1 1 5 -1
1 3 5 7
2 4</code></pre>
<p><strong>输出 #1</strong></p>
<pre><code class="language-text">6
10</code></pre>
<h4 id="说明提示">说明/提示</h4>
<h5 id="样例-1-解释：">样例 1 解释：</h5>
<p><img src="https://cos.royce2003.top/49770/01.webp-default" alt="解释"></p>
<p>故输出结果为 6、10。</p>
<hr>
<h5 id="数据规模与约定">数据规模与约定</h5>
<p>对于 $30%$ 的数据：$N\le8,M\le10$；</p>
<p>对于 $70%$ 的数据：$N\le 10000,M\le10000$；</p>
<p>对于 $100%$ 的数据：$1 \leq N, M\le 500000$，$1 \leq x, y \leq n$，保证任意时刻序列中任意元素的绝对值都不大于 $2^{30}$。</p>
<h3 id="题解">题解</h3>
<p>上一篇文章已经讲了<code>树状数组 1</code>，单点修改区间查询。</p>
<p>树状数组 2 需要实现的是区间修改，单点查询。</p>
<p>并且树状数组 2 要完全依赖于树状数组 1，仅在 1 的基础上引入差分数组</p>
<p>通过差分数组将其转换为单点修改区间查询，没错，就是树状数组 1，的单点修改区间查询</p>
<p>说到差分我就想到了 xzt 卖煎饼，想到 xzt 卖煎饼我就想到了暴力 $O(nm)$ 解法，想到这个解法就想到了我是多么菜鸡<img src="https://cos.royce2003.top/49770/02.webp-default" data-align="inline"></p>
<h4 id="前置知识-差分数组">前置知识 差分数组</h4>
<p>现有一序列 $A$
$$
A={3,,1,,4,,1,,5,,9,,2,,6,,5}
$$
建立一个差分数组 $D$，使得 $D_i=A_i-A_{i-1}$
$$
D={3,;-2,,3,,-3,,4,,4,,-7,,4,,-1}
$$</p>
<p>此时将 $A$ 序列中 $A_3 \sim A_5$ 都加上 3，得到新的 $A$
$$
A={3,,1,,7,,4,,8,,9,,2,,6,,5}
$$
此时再更新 $D$ 数组
$$
D={3,,-2,,6,,-3,,4,,1,,-7,,4,,-1}
$$
不难发现，在 $A$ 序列的 $A_i \sim A_j$ 区间分别加上 $n$ ，在差分数组 $D$ 中就相当于 $D_i;+=; n,;D_{j+1};-=;n$</p>
<p>相信聪明的你已经发现了，这里出现了树状数组 1的单点修改</p>
<h4 id="查询">查询</h4>
<p>这个也就变的很简单了，利用差分数组的性质，假设我们要求 $A_3$</p>
<p>那么</p>
<p>$$
A_3=D_1+D_2+D_3
$$
好啦，就是这么简单</p>
<h3 id="结束">结束</h3>
<p>附上 AC 代码</p>
<pre><code class="language-cpp">#include &lt;cstdio&gt;

int n,m,k,x,aa,l,r;
int a[500110],c[500110];

int read() {
    bool flag = 1;
    int x = 0;
    char ch = getchar();
    while (ch&lt;&#39;0&#39; || ch&gt;&#39;9&#39;) {if (ch == &#39;-&#39;) flag = 0; ch = getchar();}
    while (ch&gt;=&#39;0&#39; &amp;&amp; ch&lt;=&#39;9&#39;) {x *= 10;x += ch-&#39;0&#39;;ch=getchar();}
    return flag ? x:-x;
}
int lowbit(int x) {
    return x &amp; -x;
}
void add(int x,int k) {
    while (x&lt;=n) {
        c[x] += k;
        x += lowbit(x);
    }
}
int find(int x) {
    int sum = 0;
    while (x) {
        sum += c[x];
        x -= lowbit(x);
    }
    return sum;
}

int main() {
    n = read(); m = read();
    for (int i=1; i&lt;=n; i++) {
        a[i] = read();
        add(i, a[i]-a[i-1]);
    }
    while (m--) {
        aa = read();
        if (aa==1) {
            l = read(); r = read(); k =read();
            add(l,k);
            add(r+1,-k);
        }
        else {
            k = read();
            printf(&quot;%d\n&quot;, find(k));
        }
    }
    return 0;
}</code></pre>
<p>[^1]: 题目来源：<a href="https://www.luogu.com.cn/problem/P3368">P3368 【模板】树状数组 2 - 洛谷 | 计算机科学教育新生态</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[P3368 【模板】树状数组 1]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/fenwick-tree-1/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/fenwick-tree-1/</guid>
            <pubDate>Wed, 18 Mar 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="题目">题目</h2>
<p>[^1]</p>
<h4 id="题目描述">题目描述</h4>
<p>如题，已知一个数列，你需要进行下面两种操作：</p>
<ul>
<li>将某一个数加上 $x$</li>
<li>求出某区间每一个数的和</li>
</ul>
<!--more-->

<h4 id="输入格式">输入格式</h4>
<p>第一行包含两个正整数 $n,m$，分别表示该数列数字的个数和操作的总个数。</p>
<p>第二行包含 $n$ 个用空格分隔的整数，其中第 $i$ 个数字表示数列第 $i$ 项的初始值。</p>
<p>接下来 $m$ 行每行包含 33 个整数，表示一个操作，具体如下：</p>
<ul>
<li><code>1 x k</code> 含义：将第 $x$ 个数加上 $k$</li>
<li><code>2 x y</code> 含义：输出区间 $[x,y]$ 内每个数的和</li>
</ul>
<h4 id="输出格式">输出格式</h4>
<p>输出包含若干行整数，即为所有操作 22 的结果。</p>
<h4 id="输入输出样例">输入输出样例</h4>
<p><strong>输入 #1</strong></p>
<pre><code class="language-text">5 5
1 5 4 2 3
1 1 3
2 2 5
1 3 -1
1 4 2
2 1 4</code></pre>
<p><strong>输出 #1</strong></p>
<pre><code class="language-text">14
16</code></pre>
<h4 id="说明提示">说明/提示</h4>
<p>【数据范围】</p>
<p>对于 $30%$ 的数据，$1 \le n \le 8，1\le m \le 10$；</p>
<p>对于 $70%$ 的数据，$1\le n,,m\le10^4;$</p>
<p>对于 $100%$ 的数据，$1\le n,m \le 5\times 10^5$。</p>
<p>样例说明：</p>
<p>故输出结果 14、16</p>
<p><img src="https://gitee.com/royce2003/blog/raw/master/img/2256.png" alt="数据范围"></p>
<p>(写这篇呢其实是因为自己已经不会树状数组了，正好借此机会复习下 QAQ)</p>
<h2 id="题解">题解</h2>
<h3 id="树状数组">树状数组</h3>
<p>首先需要了解什么是 <code>树状数组</code></p>
<p>树状数组用的是树结构的思想，即树型逻辑结构，但他不是树形结构啦</p>
<h4 id="特点">特点</h4>
<blockquote>
<p>树状数组 (Binary Indexed Tree(B.I.T), Fenwick Tree)是一个查询和修改复杂度都为 og(n) 的数据结构。主要用于查询任意两位之间的所有元素之和，但是每次只能修改一个元素的值；经过简单修改可以在 log(n) 的复杂度下进行范围修改，但是这时只能查询其中一个元素的值(如果加入多个辅助数组则可以实现区间修改与区间查询)。</p>
</blockquote>
<p>对于这题，简单来说就是单点修改区间查询，一般地，树状数组不支持区间修改单点差选，但是我们也有办法让他支持.....</p>
<p>树状数组的优势就在于其维护的时间复杂度为 $O(log , n)$ ，而类似的前缀和数组维护的时间复杂度为 $O(n)$，两者的查询都是 $O(1)$</p>
<p>（说到这我就想起来某次校内赛的xzt买煎饼。。。。还好我拿了20分）</p>
<h3 id="前置知识">前置知识</h3>
<h4 id="lowbit">lowbit</h4>
<p>实际上，对于树状数组 $tree$ 的每一个 $i$，其实际意义应该为：算上其本身的讯息，总共存储了 $2^k$ 个元素的信息，其中 $k$ 表示 $i$ 在二进制下，末尾零的个数，同时也可以表示最小的含 1 位的二进制权值——换句话讲，$2^k$ 即可表示成：对于每个二进制意义下的 $i$，从最末位数 $k+1$ 位，保留这 $k+1$ 位并删除 $k+1$ 位以左的所有数位上的数，留下的新二进制数的实际大</p>
<p><img src="https://gitee.com/royce2003/blog/raw/master/img/0dd7912397dda14482d369acbfb7d0a20df486d1.jpg" alt="树状数组结构"></p>
<table>
<thead>
<tr>
<th align="center">十进制</th>
<th align="center">二进制</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">11</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">100</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">101</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">110</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">111</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">1000</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">1001</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">1010</td>
</tr>
</tbody></table>
<p>图文并茂之后有没有看出点什么 QAQ</p>
<p>记得当时学的时候，在学校大佬的帮助下才理解了这些东西，可能我比较菜吧</p>
<p><del>没看出来就多看几遍吧</del> 好像也还是看不出来，那就记下来结论吧</p>
<p>对于每一个 $x$ 的最低含一位，即上文中的 $2^k$,可以借助一个 $lowbit$ 函数实现 emmm 一个极其玄学的东西</p>
<p>再把 <code>lowbit</code> 说简单点就是</p>
<p>把一个整数变成二进制，从右往左找到第一个1，然后返回这个1所表示的十进制值。</p>
<p>玄学公式登场 <code>x &amp; -x</code></p>
<p>举个例子</p>
<p>$$
4 = 100,,-4 = 011 + 1 = 100\
~\
\because100,&amp;,100=100=4 \
 ~\
\therefore lowbit(4)=4\
$$</p>
<pre><code class="language-cpp">int lowbit(int x) {
    return x &amp; -x; //就是这么玄学
}</code></pre>
<p>为什么要这样干呢</p>
<p>我们先列出 1~8 的 $lowbit$</p>
<p>$1;2;1;4;1;2;1;8$</p>
<p>我们让 $C[i]$ 管理 $A[i-lowbit(i)+1,,i]$ 这段区间，如下图</p>
<p><img src="https://gitee.com/royce2003/blog/raw/master/img/Snipaste_03-19_11-45-31.png" alt="对应管理"></p>
<p>那么我们把某个点 $+x$ 的时候只需要把能管到这个点的都 $+x$ 就好啦，那我们如何找哪些能管到我们修改的点呢，这时候就需要 $lowbit$ 了</p>
<h4 id="前缀和">前缀和</h4>
<h5 id="一维前缀和">一维前缀和</h5>
<p>现有一个长度为 $N$ 的序列 $A$，需要进行 $M$ 次操作，每次操作选取从 $A_i$ 到 $A_j$ 共 $j-i+1$ 个数并求出他们的总和 （N 和 M 可以很大）  </p>
<p>例：</p>
<p>$$
N=9，;A={3,1,4,1,5,9,2,6,5}
$$</p>
<p>如果按照题意暴力，最坏情况下时间复杂度 $O(n\times m)$（是这个吗，我咋感觉时间复杂度好像大概可能不是这个QAQ）</p>
<p>反正时间复杂度挺高的就对了</p>
<p>那我们可以新建一个数组 $B$ ，其中 $B_i=B_{i-1} +A_i$</p>
<p>此时我们需要求 $a_i-a_j$ 的总和，<del>意会下</del>，只需要求 $B_j-B_{i-1}$ 就好啦</p>
<p><del>很明显</del>，利用前缀和的方法，因为B数组是在读入时进行处理，可以看作不需要时间，而查询的时间复杂度就是 $O(1)$ 啦</p>
<h5 id="二维前缀和">二维前缀和</h5>
<p>一维前缀和会了二维的也很简单</p>
<p>$$
A=
\left[
\begin{matrix}
5 &amp; 6 &amp; 6 &amp; 1 &amp; 4 &amp; 6\
3 &amp; 4 &amp; 2 &amp; 4 &amp; 1 &amp; 7 \
0 &amp; 9 &amp; 4 &amp; 6 &amp; 2 &amp; 4
\end{matrix}
\right]
;
B=
\left[
\begin{matrix}
5 &amp; 11 &amp; 17 &amp; 18 &amp; 21 &amp; 27\
8 &amp; 18 &amp; 26 &amp; \cdots &amp; \cdots &amp; \cdots \
\cdots &amp; \cdots &amp; \cdots &amp; \cdots  &amp; \cdots &amp; \cdots
\end{matrix}
\right]
$$</p>
<p>若我们要求 $x_1,,y_1$ 与 $x_2,,y_2$ 两点所围成矩形内数字的和
公式 $sum=B_{x_2,y_2}-B_{x_2,1}-B_{1,y_1}+B_{x_1-1,y_1-1}$</p>
<h3 id="储存">储存</h3>
<p>树状数组本质就是一个数组，我们用 C 来表示，然后把 C 排成数🎄的样子，就像前面的那个图那样</p>
<p><img src="https://gitee.com/royce2003/blog/raw/master/img/0dd7912397dda14482d369acbfb7d0a20df486d1.jpg" alt="树状数组结构"></p>
<p>$C[1]=A[1]$<br>$C[2]=A[1]+A[2]$<br>$C[3]=A[3]$<br>$C[4]=A[1]+A[2]+A[3]+A[4]$<br>$C[5]=A[5]$<br>$C[6]=A[5]+A[6]$<br>$C[7]=A[7]$<br>$C[8]=A[1]+A[2] \cdots A[8]$</p>
<p>很明显 $C[i]=A[i-lowbit(i)+1]+A[i-lowbit(i)+2]+ \cdots +A[i]$</p>
<p>用代码写就是</p>
<pre><code class="language-cpp">for (j=i-lowbit(i)+1; j&lt;= i; j++)
    c[i] += a[j];</code></pre>
<p>对于 1, 3, 5, 7 这类 $C[i]$ 后只有一个 $A[i]$ 的，我们称之为基点<br>不难发现基点的都是是奇数，即 lowbit=1
反之，lowbit=1 的数一定是奇数，也一定是基点。</p>
<p>而对于 1, 2, 4, 8 这类 $C[i]$ 后是 $\sum_{x=1}^i a_x$ 的，我们称之为统括点<br>也不难发现，统括点的二进制能写成 1000…… 的形式
那么统括点一定就是 2 的幂，反之 2 的幂也一定是统括点</p>
<p>特别的，1 既是基点又是统括点<br>6 不是基点也不是统括点</p>
<h3 id="单点修改">单点修改</h3>
<p>如何进行单点修改，其实在之前已经讲过了<br>比如我们让 $A[3]+1$，那么有包含 $A[3]$ 的所有 $C$ 都要 $+1$
包括 $C[3],C[4],C[8],C[16],C[32]\cdots$</p>
<p>那么我们只需要这样就行了</p>
<pre><code class="language-cpp">for(j=i; j&lt;=n; j+=lowbit(j))
    C[i] += x;</code></pre>
<h3 id="区间查询">区间查询</h3>
<p>要想得到 i 到 j 的所有数的总和 $sum_{i,j}$，只需要得到 $sum_{1,i}$ 和 $sum_{1,j}$</p>
<p>$$
sum_{i,j} = sum_{1,i} - sum_{1,j} + A_i
$$</p>
<p>也就是前面讲到的前缀和</p>
<p>先求 $sum_{1,i}$ ，即从 i 开始不断减去 lowbit 并加 C 的值，直到找到第一个统括点（第一个包含该点的统括点）</p>
<pre><code class="language-cpp">int find(int x) {
    int sum = 0,i;
    for(i=x; i!=lowbit(i); i-=lowbit(i))
        sum += c[i];
    sum += c[i]; //因为最后一次循环并没有进入，故在此处再加一次c[i]
    return sum;
}</code></pre>
<p>$sum_{1,j}$ 同理</p>
<h3 id="结束">结束</h3>
<p>附上 AC 代码</p>
<pre><code class="language-cpp">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
using namespace std;

int n,m,k,x,aa;
int a,c[500110];

int lowbit(int x) {
    return x &amp; -x;
}
void add(int x,int k) {
    while(x&lt;=n) {
        c[x] += k;
        x += lowbit(x);
    }
}
int find(int x) {
    int sum = 0,i;
    for(i=x;i!=lowbit(i);i-=lowbit(i))
        sum += c[i];
    sum += c[i];
    return sum;
}

int main() {ssd
    cin &gt;&gt; n &gt;&gt; m;
    for(int i=1;i&lt;=n;i++) {
        cin &gt;&gt; a;
        add(i,a);
    }
    while(m--) {
        cin &gt;&gt; aa &gt;&gt; x &gt;&gt; k;
        if(aa==1) add(x,k);
        else cout &lt;&lt; find(k) - find(x-1) &lt;&lt; endl; //此处和 find(k) - find(x) + a[x] 是一样的
    }
    return 0;
}</code></pre>
<p>[^1]: 题目来源：<a href="https://www.luogu.com.cn/problem/P3374">P3374 - 洛谷 | 计算机科学教育新生态</a></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[再见 2019，你好 2020]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/hi-2020/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/hi-2020/</guid>
            <pubDate>Wed, 01 Jan 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h3 id="上">上</h3>
<p>19 年的上半年，备战中考。
初三了，能明显感觉到大家都开始认真了。初三上学期感觉自己一直不在状态，没考好，慢慢紧张起来。
在学校天天听老师念叨
下学期状态慢慢调整回来了，也不再那么紧张，每天两点一线的生活已经习惯了，班级里也不再像以前一样。</p>
<p>记得考前几个星期，好朋友出现<del>感情问题</del>，放学后在车站帮他疏导疏导，之后便聊起了人生，他中考之后就要去加拿大了，或许再也见不到。当时约定他努力学习考进多伦多大学，我也努力进多伦多，这样就又可以做同学了。现在再看，这或许是对离别的安慰，但又或许是前进的动力。他送了我个高达，我送了他个火石挂件，他的高达我还在，但不知道我的火石挂件如何了。</p>
<p>不知不觉便到了中考前夕，记得那个晚上和一个学姐一个学长聊了很多，也对高中生活有了更多的了解。虽说讲的大部分是关于高中的阴暗面，但我心中仍满怀对高中生活的憧憬</p>
<p>第二天中考，到学校，居然买了可乐棒棒糖给我们！！不过好像是等到考完才发给我们，后面才知道是班主任自己掏的钱。</p>
<p>中考那几天，除了第一科的时候比较紧张，后面都还好，时间很快，转眼就考完了，之后便开始玩了。后面不怎么记得了，貌似当天下午就几个人出去玩了。</p>
<p>毕业典礼在光华大礼堂举行，听着校长的唠叨，但却不觉得烦，老师们还精心录制了视频，也为我们做了视频，很尴尬的是2班的集体照和我们班的弄个错了，不过还是很感动。结束之后回到班级，班级里开了一个小 party，请来了各科老师，拍了合照，成功与各科老师合了影！</p>
<p>到了出成绩那天，早一起来我爸就来问我成绩出了没，查成绩的时候手都在抖，703，感觉和预期差不多，再问了下其他同学，感觉考的还不错，接着就开始等通知书。</p>
<h3 id="下">下</h3>
<p>记得那时候进了几个二中新生群，有人预测报送班分数线 700，也有人说更高，对此我也抱着随缘的态度，进了那就运气好，没进也没什么关系。之后又在群里看到信息社的人，加了好友了解了一番，便加入了信息社。</p>
<p>7 月 10 号，独自一人去学校机房面基<del>（害怕）</del></p>
<p>由于没去过，不认识路，群里一个叫李乐禛的人在校门口等我。</p>
<p>那是我第一次见到乐禛，一见面好尴尬哦，之后就被他带到了 6 楼，在机房门口看见了老师和另外几个人，进去之后随便找了个地方坐下，在乐禛的指导下成了一名 <code>OIer</code> ？</p>
<p><img src="https://cos.royce2003.top/ac33bbfd/01.webp-default" alt="第一次 AC"></p>
<p>过了没几天收到了通知书，然后去学校报到，然后就开始衔接课了。陆陆续续信息社的人也多了起来。没想到还有小学同学，双胞胎姐姐妹妹，完了小学分的清清楚楚，现在完全分不清了。</p>
<p>之后是一个三天的军训，第一天身体原因咕了，军训完也认识了班里许多人。没去基地可惜了。</p>
<p>之后便正式上课了。</p>
<p>九月初因为考试放学早，一起同校的许多人商量着回去看老师。回到了 M1，那熟悉的校门，熟悉的教学楼，熟悉的操场，勾起了我心底的伤感。走上熟悉的楼梯，走过熟悉的走廊，透过窗户，看到了我们和蔼的廖老师，挺着大肚子还在坚持工作，她在监考也就没交她出来了。然后去了秀珠办公室，听他吐槽这一届的差劲，回想起她原来对我们说的话：“你是我们带过最差的一届。”，xswl。几个月没见，就感觉已经老了好多，或许是因为更操心了吧。</p>
<p>九月十号再回母校看老师，秀珠带学生去军训了，没见到。这次和我们美丽的前段长和可爱年轻的小黄妈一起体验了下学校的高级会议室（据说校长单独找人谈话用的）。还见到了永远年轻的晓晶，我们一起在里面聊了许多，时而吐槽其他老师时而聊聊现在。</p>
<p>还是 M1 好啊！</p>
<p><img src="https://cos.royce2003.top/ac33bbfd/02.webp-default" alt="校门">
<img src="https://cos.royce2003.top/ac33bbfd/03.webp-default" alt="初中部">
<img src="https://cos.royce2003.top/ac33bbfd/04.webp-default" alt="阅览室">
<img src="https://cos.royce2003.top/ac33bbfd/05.webp-default" alt="篮球场">
<img src="https://cos.royce2003.top/ac33bbfd/06.webp-default" alt="校徽"></p>
<p>11 月中旬参加了 CSP，没考好但收获很大。</p>
<hr>
<h3 id="总结">总结</h3>
<p>这一年失去了很多，同时也收获了很多。</p>
<p>人生就是这样吧，有了失去才会有收获。 有得必有失，有失必有得。 得到了成熟，就失去了天真；得到知识，就失去了汗水；得到了城市的喧嚣，就失去了乡村的宁静。</p>
<p>但失去也意味着得到：磨练换来成长，勤奋带来收获。</p>
<blockquote>
<p>我一向在思考，一向在挣扎，我不明白，人为什么一向在追求，却又一向在失去，这样的得与失之间，我们究竟得到了什么，又失去了多少，得与失之间我们又该怎样去权衡，我们是否该为了不失去而不追求，为了多得到而少给予，这一切纠结的思绪在我为自我的理想而追求时得到了理清，我的经历告诉我：追求是对人生最好的诠释，我们在追求时应对得失，在得失之间收获一切。所以此刻，我很坦然，我明白，在一次次的得失较量之间，我将学会一些东西，一些会在我的前进之路上为我披荆斩棘的东西，它们将是我人生中最宝贵的财富。 --《得失之间》</p>
</blockquote>
<p>新的一年，朝着自己的理想，努力奋斗!</p>
<p>祝大家在新的一年里心想事成</p>
<p><img src="https://cos.royce2003.top/ac33bbfd/07.webp-default" alt="新年快乐"></p>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Hello World]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/hello-world/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/hello-world/</guid>
            <pubDate>Sun, 24 Nov 2019 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>2019 年 11 月 24 日，我的博客诞生了！</p>
<p>$$
Hello; World
$$</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;
using namespace std;

int main() {
    cout &lt;&lt; &quot;你好世界&quot; &lt;&lt; endl;
    cout &lt;&lt; &quot;Hello World&quot; &lt;&lt; endl;
    return 0;
}</code></pre>
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2019 CSP 游记]]></title>
            <link>https://bill5522.github.io/%3CBlog%3E/posts/2019-csp/</link>
            <guid>https://bill5522.github.io/%3CBlog%3E/posts/2019-csp/</guid>
            <pubDate>Sun, 24 Nov 2019 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>OI第一年，不忘初心砥砺前行！</p>
<!--more-->

<h3 id="day-0">Day 0</h3>
<p>第一次参加 CSP，贼激动。</p>
<p>早上七点多前往二路做 k108 去动车站（我貌似是最迟到的....）动车上左边 cjl 右边 zy（小声bb：看cjl调他那个游戏手柄半天搞不好有点好笑）在车上写了会儿模板，途中加林突然好心指了个错误<del>（吓到我了）</del>。很快“前方到站----福州！”</p>
<p>途中拍了几段超治愈的视频，强迫症极度舒适。
之后便坐公交到了酒店。</p>
<p>上车前</p>
<blockquote>
<p>lz：“带零钱了吗”（手里拿着好几个硬币掂啊掂）
我们：“嗯嗯嗯”</p>
</blockquote>
<p>马上上车时</p>
<blockquote>
<p>lz：“带零钱了吗”x2
（手里掂硬币）x2
我们：“嗯嗯嗯”x2</p>
</blockquote>
<p>lz超级贴心哇！！不过大家貌似都带了</p>
<p>吐槽酒店前台，我和 zyy 的身份证应该是第二个递过去的，结果倒数第三个办好入住<del>cao</del>，被安排在了 801（七（八）人的聚集地 我 zyy ljj czx hjj hyy cxyu （ljz））。</p>
<p>中午在酒店门口一个转角的饭店随便吃了点（烧麦贼坑人，我 zyy czx hjj都被坑到了 czyu 貌似也有，当然还有 ljj 被皮蛋瘦肉粥坑到了）此处也成了之后几天吃早饭的地方（酒店早餐真的真的没东西吃）。</p>
<p>和服务员的对话</p>
<blockquote>
<p>“我的烧麦能先拿过来吗”
“好的马上”
.......几分钟过去了
“<del>在？</del>我的烧麦能先拿过来吗”
“好的马上”
.......几分钟过去了
“我的烧麦还没拿过来吗？”
“马上来了”
“（大声起来）前面问了几遍了都说马上，怎么还没来？”
.....10s 后烧麦到了....</p>
</blockquote>
<hr>
<p>下午貌似打了会儿电竞就去三中试机了（测试电脑能不能编译运行程序之类的），不会高精 a+b，就只好打个普通 a+b 和并查集练手（几分钟就结束了），之后还剩很多时间，xzt 还教了我高精 a+b，感谢！感谢！
还见到了 zzq 大神的照片%%%</p>
<p><img src="https://cos.royce2003.top/d66957d/01.webp-default" alt="01"></p>
<p>回到酒店，由于蓝咕咕是学仔，还没来，于是乎我们又开始电竞了，801 再次聚集一大批人（貌似每天都很多人）
时间飞快，晚上就到了，在美团点了份外卖（送的好慢啊）。。。。
然后忘记干了什么。。。。</p>
<p>很快蓝咕咕和朱先生到了，于是乎，和列东中学的一起开了个小会（考前注意），蓝咕咕讲师。电脑莫名被征用（蓝鸟电脑貌似没法连电视，<del>然后为什么不征用 lz 电脑？（求解答）</del>）中途蓝鸟按 f11 想编译运行，然后没反应，再按，还是没反应，我终于忍不住伸出手想去先按下 Fn，结果。。。朱先生的奶茶被我打翻了。。啊啊啊啊我的电脑。。。不过貌似并没有撒电脑上。。差一点点。。。还好。接着讲了fc的用法。。<del>又翻车了</del>。。这次我的锅，配 vscode 的时候乱搞了环境变量，然后就出现诡异问题了（终于在 11 月 19 号解决了，时隔4天<del>咕咕咕</del>）
　　
<img src="https://cos.royce2003.top/d66957d/02.webp-default" alt="02"></p>
<p><img src="https://cos.royce2003.top/d66957d/03.webp-default" alt="03"></p>
<p>大概十点多结束了（应该是）
貌似是社长上的最后一节课了难过呜伤心呜呜呜X﹏x</p>
<p>几个人又一起回了 801 开始了深夜学习！！</p>
<p><img src="https://cos.royce2003.top/d66957d/04.webp-default" alt="04"></p>
<p>十一点多蓝鸟来了（以为来<del>扫黄</del>查房）<del>没想到</del>端了个电脑来一起学习（忘记lz有没有来了）吐槽下酒店的床，真的真的太轻了吧，我们两人坐地上靠着床都靠不住 emmmm 不过地上垫个毯子坐在确实舒服，快十二点蓝鸟回去睡觉了，又剩下了我们几个。。。
然后开始尝试拍⭐⭐（福州污染大，几乎没有⭐）</p>
<p><img src="https://cos.royce2003.top/d66957d/05.webp-default" alt="05"></p>
<p><img src="https://cos.royce2003.top/d66957d/06.webp-default" alt="06">
　　
那个晚上，板子刷了一遍，最短路弱化打了好几遍，普通版的也打了好几遍（因此上蓝）</p>
<p><img src="https://cos.royce2003.top/d66957d/07.webp-default" alt="07"></p>
<p>重载那部分真的不理解啊，只好背下来咯</p>
<pre><code class="language-cpp">struct node {
    int pos,dis;
    bool operator&lt;(const node &amp;a) const {
        return a.dis&lt;dis;
    }
};
priority_queue&lt;node&gt; q;</code></pre>
<p>默了五六遍终于记住了 emmm</p>
<p>接下来的事记不大清楚了。依稀记得
czx 床上躺了一会儿，起来吐槽固体传音快（貌似是这样）
然后 hjj 也睡了会儿
hyy 在我和 zyy 下棋的时候睡了一小会儿
czyu 早就睡了，可能睡到十二点多 or 一点多
ljj 也躺了会儿，估计没睡
zyy 没躺也没睡（好像）
我躺了会儿没睡</p>
<p>三点多不行了，我和 zyy 去隔壁房价睡觉了，说好四点十分叫我两，然后我醒来？？？zyy 呢？一看 4:20 了，记得四点 5 6分 的时候还在和 zyy 讲话啊。。。。房间莫名多出 cxyu，问 hyy：“咋不叫我？”“看你睡着了就没叫”。。好暖心啊。
再回到 801，linjj 还在学，hjj 睡着了，于是乎我和 zyy 又开始学，突然莫人手机开始响。。。。hjj 的闹钟。。。貌似她自己并没有听到（带耳机的缘故？）
cao 本以为一下就停了。。。。一直不停
啊，这 hjj 对自己太狠了吧（虽说没什么用），然后 cxyu 和 hyy 赶来拿走了她的手机，可还有闹钟咋办<del>砸了</del>关机√顺便取消关机闹钟。hjj 就这样<del>再也没醒了</del></p>
<p>大概四点左右催完 ljj 去睡觉，我 zyy czx来到了 6 楼，准备睡觉，然后莫名开始学 and 玩？准备结束了，cxyu 发来图片说天花板有东西闪？？？<del>吓到我了</del>其实是个报警器</p>
<p><img src="https://cos.royce2003.top/d66957d/08.webp-default" alt="08"></p>
<p>好吧，去楼上康康，又溜到八楼，一翻沟通，最终觉得她也先去6楼，想顺便去 801 拿个电脑去学，然后房卡在 zyy 那，cxyu 去拿我在楼上等。。。。她跑 7 楼去了。。。，后面我自己下去拿了，然后<del>潜入</del> 801 <del>偷</del>电脑。尴尬的事来了，桌面 上<del>zyy</del> 和 hjj 的和 luojj 的电脑（luojj 12:30 送电脑来给我们用，大好人！感谢！前面忘记说了实名举报 hjj 玩了 luojj 的电脑游戏<del>不得不说那声音太好听了</del>），然后发现两台电脑都关了，没有密码 emmmm，cxyu 瞄了一眼 hjj，看她睡得那么香嘻嘻嘻，偷来 hjj 的电脑走到床边，<del>一脸奸笑</del>把<del>邪恶的</del>手伸向hjj.....（脑补画面）（其实就是拿 hjj 手指解锁emmm）受不鸟了，我溜到走廊静静等等......然后她空手出来了......什么都没偷到，空手去了 6 楼（第二天发现 luojj 电脑根本没锁 emmmm）</p>
<p>到了 610，然后我貌似还学了一会，cxyu 说要学，我：“五分钟就好”......十分钟之后我还在看.....貌似又过了几分钟，啊终于结束了，上床睡觉。可怜的 czx 只好和我挤一张了（我睡着之前看他貌似是睡了，不知道后面怎么了）。
（12点之后是不是要写到 Day1 哇）</p>
<h3 id="day-1">Day 1</h3>
<p>早上六点多手机突然想起来，一看，我妈？？？接电话之后才知道昨天给 lz 留电话叫起床的时候留成我妈的了。。。。好尴尬呀。去了昨天中午吃饭的地方买了烧麦。
临走前写了个 <code>DFS</code></p>
<p><img src="https://cos.royce2003.top/d66957d/09.webp-default" alt="09"></p>
<p>前往福州三中。　一进去，哇好大呀，这教学楼太有排面了。</p>
<p><img src="https://cos.royce2003.top/d66957d/10.webp-default" alt="10"></p>
<p><img src="https://cos.royce2003.top/d66957d/11.webp-default" alt="11"></p>
<p>but 机房要爬 6 楼差评。进去之前开始失忆 <code>priority</code> ？<code>prio</code>？？<code>pr</code>？等等怎么读？？
完了完了。。。。。完全忘记，然后进考场，priority，瞬间又记起来了......</p>
<p>进去第一件事 整理桌面
建个文件夹，桌面上能放进去的都塞了进去，留个考试文件</p>
<p>拿到解压密码，开始猜特殊含义 emmmm 貌似没有
开始看 t1 <a href="https://www.luogu.org/problem/P5657">格雷码</a>。。看不懂题目，放弃 。
t2 <a href="https://www.luogu.org/problem/P5658">括号树</a>，看懂题目了，<code>括号匹配+子串</code> 还在 <code>树</code> 上？？括号匹配的题做过，子串也做过类似的，可搞在一起不会写啊，关键是还在树上，告辞。等等，这数据范围妙啊，是条 <code>链</code>，嘻嘻，那貌似可做。。。。四十分钟过去了。。。写崩了，放弃
开始 t3 <a href="https://www.luogu.org/problem/P5659">树上的树</a>。。。题目也看懂了，不会写。。wait？？？又有 <code>链</code> ，再次开始骗分。。。40 分钟过去了。。崩了（甚至想些冒泡排序）
过去差不多一个半小时了，什么都还没写出来，逐渐炸毛。。重回t1看题目，终于看懂题目了，貌似可做，先是想到递推，尝试写了下。。。又崩了，然后开始写递归，大概四十分钟写了部分分的，然后突然想到题目的顺序逆序（我以为要排序。。）然后觉得刚刚都写错了，删删删。。。开始怀疑人生，周围大佬们都在猛烈地敲打键盘，就我一个蒟蒻。。。
然后开始准备找规律，找啊找找啊，貌似快推出来了，开始激动，然后。。没然后了。。剩差不多一小时，一题没写出来，万般无奈下开始 <code>打表</code> ，然后瞄了一眼数据范围，前 50 分 2^10？？？1024。。再加上 2^9 2^8.......两千多行了吧。。。思索一会后觉得程序打表，把刚刚的模拟稍微改了改，完成！！15 分钟后终于好了，两千多行！第一次打这么多啊（应该也是最后一次），吐出一口<del>浊气</del>全身轻松。
差不多半小时后结束，出去听巨佬们的谈话，貌似大家都觉得不简单。</p>
<p>考完后还参观了三中，挺漂亮的（肚子咕咕咕）
中午随便点了个外卖吃，下午在电竞中度过<del>4399 真好玩</del>，晚上邹哥在醉得意请吃饭,吃的超好！！</p>
<p><img src="https://cos.royce2003.top/d66957d/12.webp-default" alt="12"></p>
<p><img src="https://cos.royce2003.top/d66957d/13.webp-default" alt="13"></p>
<p>回酒店的路上，cxyu <del>可能脑袋坏了</del>体验盲人走路（邹哥还跟着我们，其他人先走了）快到酒店时邹哥：“有研究说......(忘了邹哥怎么说的了)”。。。。。开始地理？？电梯里还问 cxyu 有什么感受？？
晚上在蓝鸟的主持下完了场狼人杀，我第二轮就挂了，全程摸鱼。。。</p>
<p>狼人杀结束后知道回收的程序发出来了，luogu 也有题目了，赶紧去测，结果提示<code>代码过长</code>，放弃了。</p>
<p>之后鸟和 lz 开始<del>捉</del>找人谈话（害怕）我和 zyy 第一个被叫下去，问了些 CSP 有个的问题，很快就结束了。最后<del>全部</del>大部分人结束后，我又被交了下去，还有 ljj xzt tfh <del>czx 由于睡着了就没叫去</del> 房间里还有 cx zzl 然后<del>秘密</del>谈话一波
回到 801，有点困就爬床上想休息几分钟，再次睁开眼？？？早上了？？</p>
<h3 id="day-2">Day 2</h3>
<p>lz 的敲门声叫醒了迷迷糊糊的我和 zyy
？zyy 怎么和我同张床，后面才知道另一张床被某个恶人占了（强烈谴责），随便吃了早饭又出发前往福州三中。</p>
<p><img src="https://cos.royce2003.top/d66957d/14.webp-default" alt="14"></p>
<p>走到六楼，进考场。</p>
<p><del>进去第一件事 整理桌面
建个文件夹，桌面上能放进去的都塞了进去，留个考试文件</del>
拿到解压密码，好像完全乱打的
开始t1 <a href="https://www.luogu.org/problem/P5664">Emiya 家今天的饭</a>？？看不懂输入？？什么鬼
放弃下一题，又看不懂，下一题
t2 <a href="https://www.luogu.org/problem/P5665">划分</a>贪心？赶紧可做，先过
t3 <a href="https://www.luogu.org/problem/P5666">树的重心</a>
以前听说过重心的概念，想不到居然在 ccf 的试卷上知道了什么是重心，可有什么用，不会啊。。。。
返回 t2，写了快一小时，结果样例都没过。又调了半小时，还是毫无进展。
再回到t1认真看题目，终于搞懂了输入，dp？？可还是不会。开始暴力。。又是不过样例。开始思考人生，算了 t1 打表吧。
打完 t1 的表还剩好久，不想做 t2t3 了，主要是不会，然后开始研究 ccf 的少年机，每个盘翻了一遍过去，然后开始找游戏
扫雷，嘿嘿嘿。。。30 分钟过去了
才 11:25，于是乎，蜘蛛纸牌，嘿嘿嘿
玩到不想玩了，11:55，差不多结束了，检查了下文件输入输出，文件夹名称，文件名称，等待考试结束。</p>
<p>出考场后看大家貌似都挺不高兴的。</p>
<p>也没怎么说话，慢慢走回酒店。
点了个外卖，开始收行李，下午 2:30 的车，比较赶，外卖 1:30 才到，抓紧吃了点开始收行李，到了集合时间还没吃完，只好边走边吃，在出发前终于吃完了</p>
<p>走到公交车站，车来的很快
lz 又开始问：“带零钱了吗？”
............
再夸次 lz 贴心！！
到动车站xzt的身份证找不到了 emmm 办了临时的，没有错过车</p>
<p>坐在车上好困，都在睡觉
中途 zyy 叫我下棋，经常过隧道网不好也就没下了，然后又我睡了
hjj 手机放在窗户那拍视频，然后睡着了，拍了快一小时，哈哈哈哈哈哈。
之后也就没发生什么事了</p>
<h3 id="写在最后">写在最后</h3>
<p>2019年，我参加竞赛的第一年，noip 也改名成了 csp（博客域名也加了 2019，以此纪念这意义重大的一年）</p>
<p>不知道是幸运还是不幸运，参加了第一届的 csp，6题里没一题写出来，day2 的难度在 luogu 的评级和 noi 一样？（欣慰）
当然，我也应该自我反思，接下来的时间继续努力，明年 csp 加油考个好成绩</p>
<p>蓝鸟退役了，朱先生也退役了，高三的也都退役了，高二可能也还有人退役
朱先生第一次认识是在机房写代码的时候，突然走过来说：“给我看看”，有点害怕，然后乖乖交出鼠标，他点到新手村看了看问了下我名字然后就走了...之后再见到我又问了我名字...
貌似还问了好几次
第一轮第二轮都和他一个考场（沾巨气啊）。
人很好，不过看着有点凶，很强，希望他能考上好大学，<del>貌似不需要我希望</del>，因为本身就年段前几的存在...祝 18 虽生日快乐🎂</p>
<p>蓝鸟，可爱的社长，人很好，声音好听，在机房经常拿着根棍子，不舍得，不过既然是蓝咕咕自己的选择，那一定深思熟虑过，祝考上好大学（是不是有点早了）
好伤心 QAQ</p>
<p>想到三年后自己退役，会伤心很久，也肯定会哭。因为不舍的信竞的小伙伴，也不舍的 OI，不过那都是后话了。
这次 csp 没考好，期中考也没考好
接下来的时间，继续努力</p>
<p>and某人还欠我顿饭！！！</p>
<hr>
<p>官方发了公告说是明年继续举办 NOIP ？
迷惑行为
算是幸运吧，参加了唯一的一届 CSP，不知道以后还会不会重新改成 CSP...</p>
<hr>
<p>一学期过去了，因为整理图床，再次看了这篇文章
或许只有我们这些因为能和队友们一起去住宾馆，才有这些欢乐吧...
然后发现自己原来写的真的...都想重写一遍了...</p>
]]></content:encoded>
        </item>
    </channel>
</rss>